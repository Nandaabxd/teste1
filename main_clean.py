"""
üîç NFC Reader & Writer PRO - Leitor e Escritor Avan√ßado de Tags NFC
===================================================================

Um aplicativo profissional completo para leitura e escrita de tags NFC com
funcionalidades avan√ßadas de automa√ß√£o, perfis personalizados e integra√ß√£o
com sistema Android.

Caracter√≠sticas PRO:
- ‚úÖ Leitura de tags NFC (m√∫ltiplos tipos NDEF)
- ‚úÖ Escrita em tags NFC (todos os formatos)
- ‚úÖ Cria√ß√£o de perfis personalizados  
- ‚úÖ Execu√ß√£o de a√ß√µes autom√°ticas
- ‚úÖ Exporta√ß√£o e importa√ß√£o de dados
- ‚úÖ Leitura e escrita de links, textos, e-mails, n√∫meros, localiza√ß√µes
- ‚úÖ Execu√ß√£o de comandos do sistema (Wi-Fi, Bluetooth, volume, etc.)
- ‚úÖ Prote√ß√£o com senha para evitar sobrescrita
- ‚úÖ Registro de hist√≥rico completo
- ‚úÖ Cria√ß√£o de tarefas em lote
- ‚úÖ Integra√ß√£o com Tasker (automatiza√ß√£o avan√ßada)
- ‚úÖ Interface personaliz√°vel e moderna
- ‚úÖ Tratamento de erros e valida√ß√£o
- ‚úÖ Suporte a diversos tipos de chips NFC
- ‚úÖ Compatibilidade com diferentes modos de codifica√ß√£o
"""

import json
import logging
from datetime import datetime
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.gridlayout import GridLayout
from kivy.uix.textinput import TextInput
from kivy.uix.spinner import Spinner
from kivy.uix.switch import Switch
from kivy.uix.tabbedpanel import TabbedPanel, TabbedPanelItem
from kivy.clock import Clock
from kivy.utils import platform
from kivy.metrics import dp
from kivy.core.window import Window

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Importa m√≥dulos locais (opcional)
try:
    from config import get_config, get_text
    from utils import file_manager, data_validator, security_helper
    from nfc_writer import nfc_writer, profile_manager, data_builder, NFCRecordType
    from nfc_automation import automation_engine, SystemCommand
except ImportError as e:
    logging.warning(f"Alguns m√≥dulos n√£o puderam ser importados: {e}")
    # Define valores padr√£o para evitar erros
    class DummyModule:
        def __getattr__(self, name):
            return lambda *args, **kwargs: None
        
        def initialize(self):
            pass
        
        def list_profiles(self):
            return []
    
    nfc_writer = DummyModule()
    profile_manager = DummyModule()
    data_builder = DummyModule()
    automation_engine = DummyModule()
    
    class NFCRecordType:
        TEXT = "text"
        URI = "uri"
    
    class SystemCommand:
        WIFI_TOGGLE = "wifi_toggle"
        BLUETOOTH_TOGGLE = "bluetooth_toggle"
        VOLUME_UP = "volume_up"
        VOLUME_DOWN = "volume_down"
        FLASHLIGHT_TOGGLE = "flashlight_toggle"
        AIRPLANE_MODE_TOGGLE = "airplane_mode_toggle"

# Classes Android - inicializadas apenas no Android
NfcAdapter = None
NdefMessage = None
NdefRecord = None
PythonActivity = None
Intent = None
PendingIntent = None

def initialize_android_classes():
    """Inicializa as classes Android necess√°rias para NFC"""
    global NfcAdapter, NdefMessage, NdefRecord, PythonActivity, Intent, PendingIntent
    
    if platform == 'android':
        try:
            from jnius import autoclass
            logger.info("Inicializando classes Android...")
            
            # Classes principais para NFC
            NfcAdapter = autoclass('android.nfc.NfcAdapter')
            NdefMessage = autoclass('android.nfc.NdefMessage')
            NdefRecord = autoclass('android.nfc.NdefRecord')
            PythonActivity = autoclass('org.kivy.android.PythonActivity')
            Intent = autoclass('android.content.Intent')
            PendingIntent = autoclass('android.app.PendingIntent')
            
            logger.info("Classes Android inicializadas com sucesso!")
            return True
            
        except ImportError as e:
            logger.error(f"Erro ao importar pyjnius: {e}")
            return False
        except Exception as e:
            logger.error(f"Erro ao inicializar classes Android: {e}")
            return False
    else:
        logger.info("Plataforma n√£o-Android detectada")
        return False


class NFCHistoryManager:
    """Gerenciador de hist√≥rico de leituras NFC"""
    
    def __init__(self):
        self.history = []
        self.max_history = 50  # M√°ximo de 50 leituras no hist√≥rico
    
    def add_reading(self, data_type, content, raw_data=None):
        """Adiciona uma nova leitura ao hist√≥rico"""
        reading = {
            'timestamp': datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            'type': data_type,
            'content': content,
            'raw_data': raw_data
        }
        
        self.history.insert(0, reading)  # Adiciona no in√≠cio
        
        # Limita o tamanho do hist√≥rico
        if len(self.history) > self.max_history:
            self.history = self.history[:self.max_history]
        
        logger.info(f"Nova leitura adicionada: {data_type}")
    
    def get_history(self):
        """Retorna o hist√≥rico de leituras"""
        return self.history
    
    def clear_history(self):
        """Limpa o hist√≥rico"""
        self.history = []
        logger.info("Hist√≥rico limpo")


class NFCDataDecoder:
    """Decodificador avan√ßado de dados NFC"""
    
    @staticmethod
    def decode_ndef_record(record):
        """Decodifica um registro NDEF com suporte a m√∫ltiplos tipos"""
        try:
            if not record or not NdefRecord:
                return {
                    'type': 'Erro',
                    'content': 'Registro inv√°lido ou classes NFC n√£o dispon√≠veis',
                    'raw': None
                }
                
            tnf = record.getTnf()
            record_type = list(record.getType())
            payload = record.getPayload()
            
            # Registro de texto (RTD_TEXT)
            if tnf == NdefRecord.TNF_WELL_KNOWN and record_type == list(NdefRecord.RTD_TEXT):
                return NFCDataDecoder._decode_text_record(payload)
            
            # Registro de URI (RTD_URI)
            elif tnf == NdefRecord.TNF_WELL_KNOWN and record_type == list(NdefRecord.RTD_URI):
                return NFCDataDecoder._decode_uri_record(record)
            
            # Registro de Smart Poster
            elif tnf == NdefRecord.TNF_WELL_KNOWN and record_type == list(NdefRecord.RTD_SMART_POSTER):
                return NFCDataDecoder._decode_smart_poster(payload)
            
            # MIME type
            elif tnf == NdefRecord.TNF_MIME_MEDIA:
                return NFCDataDecoder._decode_mime_record(record_type, payload)
            
            # Registro externo
            elif tnf == NdefRecord.TNF_EXTERNAL_TYPE:
                return NFCDataDecoder._decode_external_record(record_type, payload)
            
            # Tipo desconhecido
            else:
                return {
                    'type': 'Desconhecido',
                    'content': f'TNF: {tnf}, Tipo: {bytes(record_type).hex()}',
                    'raw': payload.hex() if len(payload) < 100 else f'{payload[:50].hex()}... ({len(payload)} bytes)'
                }
                
        except Exception as e:
            logger.error(f"Erro ao decodificar registro: {e}")
            return {
                'type': 'Erro',
                'content': f'Erro ao decodificar: {str(e)}',
                'raw': None
            }
    
    @staticmethod
    def _decode_text_record(payload):
        """Decodifica registro de texto"""
        try:
            # Primeiro byte: encoding e tamanho do c√≥digo de idioma
            encoding = 'utf-8' if (payload[0] & 0x80) == 0 else 'utf-16'
            lang_code_length = payload[0] & 0x3F
            
            # Extrai c√≥digo de idioma e texto
            lang_code = payload[1:1 + lang_code_length].decode('ascii')
            text = payload[1 + lang_code_length:].decode(encoding)
            
            return {
                'type': 'Texto',
                'content': text,
                'details': f'Idioma: {lang_code}, Encoding: {encoding}'
            }
        except Exception as e:
            return {
                'type': 'Texto (Erro)',
                'content': f'Erro ao decodificar texto: {e}',
                'raw': payload.hex() if payload else ''
            }
    
    @staticmethod
    def _decode_uri_record(record):
        """Decodifica registro de URI"""
        try:
            uri = record.toUri().toString()
            return {
                'type': 'URI/URL',
                'content': uri,
                'details': 'Link detectado'
            }
        except Exception as e:
            return {
                'type': 'URI (Erro)',
                'content': f'Erro ao decodificar URI: {e}',
                'raw': None
            }
    
    @staticmethod
    def _decode_smart_poster(payload):
        """Decodifica Smart Poster (cont√©m m√∫ltiplos registros)"""
        return {
            'type': 'Smart Poster',
            'content': 'Poster inteligente detectado',
            'details': f'Tamanho: {len(payload)} bytes'
        }
    
    @staticmethod
    def _decode_mime_record(record_type, payload):
        """Decodifica registro MIME"""
        mime_type = bytes(record_type).decode('ascii')
        return {
            'type': f'MIME: {mime_type}',
            'content': f'Dados MIME ({len(payload)} bytes)',
            'details': f'Tipo: {mime_type}'
        }
    
    @staticmethod
    def _decode_external_record(record_type, payload):
        """Decodifica registro externo"""
        ext_type = bytes(record_type).decode('ascii')
        return {
            'type': f'Externo: {ext_type}',
            'content': f'Dados externos ({len(payload)} bytes)',
            'details': f'Tipo: {ext_type}'
        }


class ModernNFCInterface(BoxLayout):
    """Interface moderna para o leitor NFC"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app = app_instance
        self.orientation = 'vertical'
        self.padding = dp(20)
        self.spacing = dp(15)
        
        # Configura interface
        self._setup_header()
        self._setup_status_area()
        self._setup_content_area()
        self._setup_action_buttons()
    
    def _setup_header(self):
        """Configura o cabe√ßalho do app"""
        header = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(60))
        
        title = Label(
            text='üîç NFC Reader PRO',
            font_size='24sp',
            bold=True,
            color=(0.2, 0.6, 1, 1),
            size_hint_x=0.8
        )
        
        info_btn = Button(
            text='‚ÑπÔ∏è',
            font_size='20sp',
            size_hint_x=0.2,
            size_hint_y=None,
            height=dp(50)
        )
        info_btn.bind(on_press=self._show_app_info)
        
        header.add_widget(title)
        header.add_widget(info_btn)
        self.add_widget(header)
    
    def _setup_status_area(self):
        """Configura a √°rea de status"""
        status_layout = BoxLayout(orientation='vertical', size_hint_y=None, height=dp(100))
        
        self.status_label = Label(
            text='üöÄ Inicializando leitor NFC...',
            font_size='16sp',
            halign='center',
            valign='middle',
            text_size=(None, None)
        )
        
        self.nfc_status = Label(
            text='üì± Status: Verificando disponibilidade...',
            font_size='14sp',
            color=(0.7, 0.7, 0.7, 1),
            halign='center'
        )
        
        status_layout.add_widget(self.status_label)
        status_layout.add_widget(self.nfc_status)
        self.add_widget(status_layout)
    
    def _setup_content_area(self):
        """Configura a √°rea de conte√∫do principal"""
        content_layout = BoxLayout(orientation='vertical')
        
        # √Årea de leitura atual
        self.reading_area = ScrollView()
        self.reading_content = Label(
            text='üëã Aproxime uma tag NFC para come√ßar a leitura...\n\n'
                 'üí° Dicas:\n'
                 '‚Ä¢ Mantenha o celular pr√≥ximo √† tag\n'
                 '‚Ä¢ Aguarde alguns segundos\n'
                 '‚Ä¢ Verifique se o NFC est√° ativado',
            font_size='14sp',
            halign='left',
            valign='top',
            text_size=(None, None),
            markup=True
        )
        self.reading_area.add_widget(self.reading_content)
        
        content_layout.add_widget(Label(text='üìÑ Leitura Atual:', font_size='16sp', bold=True, size_hint_y=None, height=dp(30)))
        content_layout.add_widget(self.reading_area)
        
        self.add_widget(content_layout)
    
    def _setup_action_buttons(self):
        """Configura os bot√µes de a√ß√£o"""
        button_layout = GridLayout(cols=2, size_hint_y=None, height=dp(120), spacing=dp(10))
        
        self.history_btn = Button(
            text='üìö Hist√≥rico\n(0 leituras)',
            font_size='14sp',
            background_color=(0.2, 0.8, 0.2, 1)
        )
        self.history_btn.bind(on_press=self._show_history)
        
        clear_btn = Button(
            text='üóëÔ∏è Limpar\nHist√≥rico',
            font_size='14sp',
            background_color=(0.9, 0.3, 0.3, 1)
        )
        clear_btn.bind(on_press=self._clear_history)
        
        settings_btn = Button(
            text='‚öôÔ∏è Configura√ß√µes\nDebug',
            font_size='14sp',
            background_color=(0.5, 0.5, 0.9, 1)
        )
        settings_btn.bind(on_press=self._show_debug_info)
        
        test_btn = Button(
            text='üß™ Teste\nSimula√ß√£o',
            font_size='14sp',
            background_color=(0.9, 0.7, 0.2, 1)
        )
        test_btn.bind(on_press=self._test_simulation)
        
        button_layout.add_widget(self.history_btn)
        button_layout.add_widget(clear_btn)
        button_layout.add_widget(settings_btn)
        button_layout.add_widget(test_btn)
        
        self.add_widget(button_layout)
    
    def update_status(self, status_text, nfc_status_text=None):
        """Atualiza o status da interface"""
        self.status_label.text = status_text
        if nfc_status_text:
            self.nfc_status.text = nfc_status_text
    
    def update_reading_content(self, content):
        """Atualiza o conte√∫do da leitura"""
        self.reading_content.text = content
        # Atualiza contador no bot√£o de hist√≥rico
        history_count = len(self.app.history_manager.get_history())
        self.history_btn.text = f'üìö Hist√≥rico\n({history_count} leituras)'
    
    def _show_history(self, instance):
        """Mostra o hist√≥rico de leituras"""
        self.app.show_history_popup()
    
    def _clear_history(self, instance):
        """Limpa o hist√≥rico"""
        self.app.clear_history()
        self.update_reading_content(
            'üóëÔ∏è Hist√≥rico limpo!\n\n'
            'üëã Aproxime uma tag NFC para come√ßar uma nova leitura...'
        )
    
    def _show_debug_info(self, instance):
        """Mostra informa√ß√µes de debug"""
        self.app.show_debug_popup()
    
    def _test_simulation(self, instance):
        """Executa uma simula√ß√£o de teste"""
        self.app.run_test_simulation()
    
    def _show_app_info(self, instance):
        """Mostra informa√ß√µes do app"""
        self.app.show_info_popup()


class NFCWriterInterface(BoxLayout):
    """Interface para escrita de tags NFC"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app = app_instance
        self.orientation = 'vertical'
        self.padding = dp(10)
        self.spacing = dp(10)
        
        self._setup_writer_interface()
    
    def _setup_writer_interface(self):
        """Configura interface de escrita"""
        # T√≠tulo
        title = Label(
            text='‚úçÔ∏è Escrita de Tags NFC',
            font_size='18sp',
            bold=True,
            size_hint_y=None,
            height=dp(40)
        )
        self.add_widget(title)
        
        # Tipo de dados
        type_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(40))
        type_layout.add_widget(Label(text='Tipo:', size_hint_x=0.3))
        
        self.data_type_spinner = Spinner(
            text='Texto',
            values=['Texto', 'URL', 'Wi-Fi', 'E-mail', 'Telefone'],
            size_hint_x=0.7
        )
        type_layout.add_widget(self.data_type_spinner)
        self.add_widget(type_layout)
        
        # Campo de entrada
        self.text_input = TextInput(
            text='Digite seu texto aqui...',
            multiline=True,
            size_hint_y=0.6
        )
        self.add_widget(self.text_input)
        
        # Bot√µes
        button_layout = GridLayout(cols=2, size_hint_y=None, height=dp(50), spacing=dp(10))
        
        write_btn = Button(text='‚úçÔ∏è Escrever Tag', background_color=(0.2, 0.8, 0.2, 1))
        write_btn.bind(on_press=self._write_tag)
        
        preview_btn = Button(text='üëÅÔ∏è Preview', background_color=(0.2, 0.6, 1, 1))
        preview_btn.bind(on_press=self._preview_data)
        
        button_layout.add_widget(write_btn)
        button_layout.add_widget(preview_btn)
        self.add_widget(button_layout)
    
    def _write_tag(self, instance):
        """Escreve dados na tag"""
        self.app.show_popup('Em Desenvolvimento', 'Funcionalidade de escrita ser√° implementada em breve!')
    
    def _preview_data(self, instance):
        """Preview dos dados"""
        data_type = self.data_type_spinner.text
        content = self.text_input.text
        self.app.show_popup('Preview', f'Tipo: {data_type}\nConte√∫do: {content}')


class NFCProfileInterface(BoxLayout):
    """Interface para gerenciamento de perfis"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app = app_instance
        self.orientation = 'vertical'
        self.padding = dp(10)
        self.spacing = dp(10)
        
        self._setup_interface()
    
    def _setup_interface(self):
        """Configura a interface"""
        title = Label(
            text='üë§ Perfis Personalizados',
            font_size='18sp',
            bold=True,
            size_hint_y=None,
            height=dp(40)
        )
        self.add_widget(title)
        
        # Lista de perfis (placeholder)
        profiles_scroll = ScrollView()
        self.profiles_list = Label(
            text='üìã Nenhum perfil criado ainda.\n\nToque em "Novo Perfil" para come√ßar.',
            halign='center',
            valign='middle'
        )
        profiles_scroll.add_widget(self.profiles_list)
        self.add_widget(profiles_scroll)
        
        # Bot√µes
        button_layout = GridLayout(cols=2, size_hint_y=None, height=dp(50), spacing=dp(10))
        
        new_btn = Button(text='‚ûï Novo Perfil', background_color=(0.2, 0.8, 0.2, 1))
        new_btn.bind(on_press=self._create_profile)
        
        import_btn = Button(text='üì• Importar', background_color=(0.2, 0.6, 1, 1))
        import_btn.bind(on_press=self._import_profiles)
        
        button_layout.add_widget(new_btn)
        button_layout.add_widget(import_btn)
        self.add_widget(button_layout)
    
    def _create_profile(self, instance):
        """Cria novo perfil"""
        self.app.show_popup('Em Desenvolvimento', 'Cria√ß√£o de perfis ser√° implementada em breve!')
    
    def _import_profiles(self, instance):
        """Importa perfis"""
        self.app.show_popup('Em Desenvolvimento', 'Importa√ß√£o de perfis ser√° implementada em breve!')


class NFCAutomationInterface(BoxLayout):
    """Interface para automa√ß√£o"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app = app_instance
        self.orientation = 'vertical'
        self.padding = dp(10)
        self.spacing = dp(10)
        
        self._setup_interface()
    
    def _setup_interface(self):
        """Configura a interface"""
        title = Label(
            text='ü§ñ Automa√ß√£o & Comandos',
            font_size='18sp',
            bold=True,
            size_hint_y=None,
            height=dp(40)
        )
        self.add_widget(title)
        
        # Comandos r√°pidos
        commands_grid = GridLayout(cols=2, size_hint_y=None, height=dp(200), spacing=dp(10))
        
        wifi_btn = Button(text='üì∂ Wi-Fi', background_color=(0.2, 0.6, 1, 1))
        bt_btn = Button(text='üì± Bluetooth', background_color=(0.2, 0.6, 1, 1))
        vol_up_btn = Button(text='üîä Volume +', background_color=(0.2, 0.8, 0.2, 1))
        vol_down_btn = Button(text='üîâ Volume -', background_color=(0.9, 0.7, 0.2, 1))
        
        wifi_btn.bind(on_press=lambda x: self.app.show_popup('Demo', 'Comando Wi-Fi executado!'))
        bt_btn.bind(on_press=lambda x: self.app.show_popup('Demo', 'Comando Bluetooth executado!'))
        vol_up_btn.bind(on_press=lambda x: self.app.show_popup('Demo', 'Volume aumentado!'))
        vol_down_btn.bind(on_press=lambda x: self.app.show_popup('Demo', 'Volume diminu√≠do!'))
        
        commands_grid.add_widget(wifi_btn)
        commands_grid.add_widget(bt_btn)
        commands_grid.add_widget(vol_up_btn)
        commands_grid.add_widget(vol_down_btn)
        
        self.add_widget(commands_grid)
        
        # Espa√ßo e mais bot√µes
        spacer = Label(text='üîß Mais funcionalidades em desenvolvimento...', halign='center')
        self.add_widget(spacer)


class ModernNFCProInterface(TabbedPanel):
    """Interface principal com abas para todas as funcionalidades PRO"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app = app_instance
        self.do_default_tab = False
        
        self._setup_tabs()
    
    def _setup_tabs(self):
        """Configura todas as abas"""
        # Aba de Leitura
        read_tab = TabbedPanelItem(text='üîç Ler')
        self.reader_interface = ModernNFCInterface(self.app)
        read_tab.content = self.reader_interface
        self.add_widget(read_tab)
        
        # Aba de Escrita
        write_tab = TabbedPanelItem(text='‚úçÔ∏è Escrever')
        self.writer_interface = NFCWriterInterface(self.app)
        write_tab.content = self.writer_interface
        self.add_widget(write_tab)
        
        # Aba de Perfis
        profiles_tab = TabbedPanelItem(text='üë§ Perfis')
        self.profiles_interface = NFCProfileInterface(self.app)
        profiles_tab.content = self.profiles_interface
        self.add_widget(profiles_tab)
        
        # Aba de Automa√ß√£o
        automation_tab = TabbedPanelItem(text='ü§ñ Auto')
        self.automation_interface = NFCAutomationInterface(self.app)
        automation_tab.content = self.automation_interface
        self.add_widget(automation_tab)
        
        # Define aba padr√£o
        self.default_tab = read_tab


class NfcReaderWriterProApp(App):
    """Aplicativo principal NFC Reader & Writer PRO"""

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.history_manager = NFCHistoryManager()
        self.decoder = NFCDataDecoder()
        self.nfc_available = False
        self.android_classes_loaded = False
        
    def build(self):
        """Constr√≥i a interface do usu√°rio"""
        Window.clearcolor = (0.95, 0.95, 0.97, 1)  # Fundo claro
        
        self.interface = ModernNFCProInterface(self)
        
        # Agenda inicializa√ß√£o ap√≥s a interface estar pronta
        Clock.schedule_once(self._post_build_init, 0.1)
        
        return self.interface
    
    def _post_build_init(self, dt):
        """Inicializa√ß√£o ap√≥s a constru√ß√£o da interface"""
        logger.info("Iniciando NFC Reader & Writer PRO...")
        
        # Inicializa classes Android se dispon√≠vel
        self.android_classes_loaded = initialize_android_classes()
        
        # Inicializa m√≥dulos PRO
        if self.android_classes_loaded:
            try:
                nfc_writer.initialize()
                automation_engine.initialize()
            except Exception as e:
                logger.warning(f"Erro ao inicializar m√≥dulos PRO: {e}")
            self._check_nfc_availability()
        else:
            self.interface.reader_interface.update_status(
                '‚ö†Ô∏è Ambiente de desenvolvimento detectado',
                'üîß Funcionalidades PRO dispon√≠veis apenas no Android'
            )
    
    def _check_nfc_availability(self):
        """Verifica se o NFC est√° dispon√≠vel e ativo"""
        try:
            if not PythonActivity or not NfcAdapter:
                self.interface.reader_interface.update_status(
                    '‚ö†Ô∏è Classes Android n√£o dispon√≠veis',
                    'üîß Execute no dispositivo Android para funcionalidade completa'
                )
                return
                
            current_activity = PythonActivity.mActivity
            nfc_adapter = NfcAdapter.getDefaultAdapter(current_activity)
            
            if nfc_adapter is None:
                self.interface.reader_interface.update_status(
                    '‚ùå NFC n√£o suportado neste dispositivo',
                    'üì± Este dispositivo n√£o possui hardware NFC'
                )
                return
            
            if not nfc_adapter.isEnabled():
                self.interface.reader_interface.update_status(
                    '‚ö†Ô∏è NFC est√° desativado',
                    '‚öôÔ∏è Ative o NFC nas configura√ß√µes do Android'
                )
                return
            
            self.nfc_available = True
            self.interface.reader_interface.update_status(
                '‚úÖ NFC Reader & Writer PRO ativo!',
                'üîç Leia tags ou ‚úçÔ∏è escreva dados personalizados'
            )
            
            # Verifica se o app foi iniciado por uma tag
            self._check_launch_intent()
            
        except Exception as e:
            logger.error(f"Erro ao verificar NFC: {e}")
            self.interface.reader_interface.update_status(
                f'‚ùå Erro ao verificar NFC: {str(e)}',
                'üîß Verifique as permiss√µes do aplicativo'
            )

    def on_start(self):
        """Chamado quando o aplicativo inicia"""
        logger.info("NFC Reader & Writer PRO iniciado")

    def on_resume(self):
        """Chamado quando o app retorna do background"""
        logger.info("App retomado")
        if self.android_classes_loaded:
            Clock.schedule_once(lambda dt: self._check_launch_intent(), 0.1)

    def _check_launch_intent(self):
        """Verifica se o app foi iniciado por uma intent NFC"""
        if not self.android_classes_loaded:
            return
            
        try:
            current_activity = PythonActivity.mActivity
            intent = current_activity.getIntent()
            if intent:
                self.handle_intent(intent)
        except Exception as e:
            logger.error(f"Erro ao verificar intent de inicializa√ß√£o: {e}")

    def on_new_intent(self, intent):
        """Chamado quando uma nova intent √© recebida (tag aproximada)"""
        logger.info("Nova intent recebida")
        self.handle_intent(intent)

    def handle_intent(self, intent):
        """Processa a intent para extrair dados da tag NFC"""
        if not self.android_classes_loaded or not intent:
            return

        try:
            action = intent.getAction()
            logger.info(f"Intent action: {action}")
            
            if action in [NfcAdapter.ACTION_NDEF_DISCOVERED, 
                         NfcAdapter.ACTION_TECH_DISCOVERED, 
                         NfcAdapter.ACTION_TAG_DISCOVERED]:
                
                self.interface.reader_interface.update_status(
                    'üîç Tag NFC detectada! Processando...',
                    '‚è≥ Decodificando dados da tag'
                )
                
                # Processa dados NDEF se dispon√≠veis
                if action == NfcAdapter.ACTION_NDEF_DISCOVERED:
                    self._process_ndef_data(intent)
                else:
                    self._process_general_tag(intent)
                    
            else:
                self.interface.reader_interface.update_status(
                    f'‚ÑπÔ∏è Intent recebida: {action}',
                    'üëã Aguardando tag NFC...'
                )
                
        except Exception as e:
            error_msg = f"Erro ao processar intent: {str(e)}"
            logger.error(error_msg)
            self.interface.reader_interface.update_status(
                f'‚ùå {error_msg}',
                'üîß Tente aproximar a tag novamente'
            )

    def _process_ndef_data(self, intent):
        """Processa dados NDEF da tag"""
        try:
            raw_msgs = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES)
            
            if not raw_msgs:
                self.interface.reader_interface.update_reading_content(
                    'üìã Tag NDEF detectada\n\n'
                    '‚ö†Ô∏è Nenhuma mensagem NDEF encontrada na tag'
                )
                return
            
            all_content = "üè∑Ô∏è **DADOS DA TAG NFC**\n"
            all_content += f"‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n"
            
            record_count = 0
            
            for msg_index, msg in enumerate(raw_msgs):
                message = msg.cast(NdefMessage)
                records = message.getRecords()
                
                all_content += f"üìÑ **Mensagem {msg_index + 1}** ({len(records)} registros)\n\n"
                
                for record_index, record in enumerate(records):
                    record_count += 1
                    decoded = self.decoder.decode_ndef_record(record)
                    
                    all_content += f"üìå **Registro {record_index + 1}:**\n"
                    all_content += f"   üè∑Ô∏è Tipo: {decoded['type']}\n"
                    all_content += f"   üìù Conte√∫do: {decoded['content']}\n"
                    
                    if 'details' in decoded:
                        all_content += f"   ‚ÑπÔ∏è Detalhes: {decoded['details']}\n"
                    
                    all_content += "\n"
                    
                    # Adiciona ao hist√≥rico
                    self.history_manager.add_reading(
                        decoded['type'],
                        decoded['content'],
                        decoded.get('raw')
                    )
            
            all_content += f"‚úÖ **Processamento conclu√≠do!**\n"
            all_content += f"üìä Total de registros: {record_count}"
            
            self.interface.reader_interface.update_reading_content(all_content)
            self.interface.reader_interface.update_status(
                f'‚úÖ Tag lida com sucesso! ({record_count} registros)',
                'üîç Leia outra tag ou ‚úçÔ∏è escreva novos dados'
            )
            
        except Exception as e:
            error_msg = f"Erro ao processar dados NDEF: {str(e)}"
            logger.error(error_msg)
            self.interface.reader_interface.update_reading_content(
                f'‚ùå {error_msg}\n\n'
                'üîß Tente aproximar a tag novamente ou verifique se a tag est√° funcionando.'
            )

    def _process_general_tag(self, intent):
        """Processa tag geral (sem dados NDEF)"""
        try:
            # Tenta obter informa√ß√µes b√°sicas da tag
            tag_info = "üè∑Ô∏è **TAG NFC DETECTADA**\n"
            tag_info += f"‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n"
            tag_info += "üìã **Informa√ß√µes:**\n"
            tag_info += "   üî∏ Tipo: Tag sem dados NDEF\n"
            tag_info += "   üî∏ Status: Tag detectada mas sem conte√∫do leg√≠vel\n\n"
            tag_info += "üí° **Sugest√µes:**\n"
            tag_info += "   ‚Ä¢ Use a aba ‚úçÔ∏è Escrever para programar a tag\n"
            tag_info += "   ‚Ä¢ Crie perfis personalizados na aba üë§ Perfis\n"
            tag_info += "   ‚Ä¢ Configure automa√ß√µes na aba ü§ñ Auto\n\n"
            tag_info += "üîß **Dica PRO:**\n"
            tag_info += "   Esta tag vazia √© perfeita para seus dados customizados!"
            
            self.interface.reader_interface.update_reading_content(tag_info)
            self.interface.reader_interface.update_status(
                '‚ö†Ô∏è Tag vazia detectada - Pronta para escrita!',
                '‚úçÔ∏è Use a aba Escrever para programar esta tag'
            )
            
            # Adiciona ao hist√≥rico
            self.history_manager.add_reading(
                "Tag Vazia",
                "Tag detectada sem dados NDEF - Pronta para programa√ß√£o",
                None
            )
            
        except Exception as e:
            logger.error(f"Erro ao processar tag geral: {e}")

    def show_popup(self, title, message):
        """Mostra popup simples"""
        content = Label(text=message, halign='center', valign='middle')
        popup = Popup(title=title, content=content, size_hint=(0.8, 0.6))
        popup.open()
    
    def show_history_popup(self):
        """Mostra popup com hist√≥rico de leituras"""
        history = self.history_manager.get_history()
        
        if not history:
            content = Label(
                text='üìã Nenhuma leitura no hist√≥rico ainda.\n\n'
                     'üëã Aproxime uma tag NFC para come√ßar!',
                halign='center',
                valign='middle'
            )
        else:
            history_text = "üìö **HIST√ìRICO DE LEITURAS**\n\n"
            
            for i, reading in enumerate(history[:10]):  # Mostra √∫ltimas 10
                history_text += f"üìå **#{i+1}** - {reading['timestamp']}\n"
                history_text += f"   üè∑Ô∏è {reading['type']}\n"
                history_text += f"   üìù {reading['content'][:50]}{'...' if len(reading['content']) > 50 else ''}\n\n"
            
            if len(history) > 10:
                history_text += f"... e mais {len(history) - 10} leituras"
            
            content = ScrollView()
            label = Label(
                text=history_text,
                text_size=(dp(300), None),
                halign='left',
                valign='top',
                markup=True
            )
            content.add_widget(label)
        
        popup = Popup(
            title='üìö Hist√≥rico de Leituras NFC',
            content=content,
            size_hint=(0.9, 0.8)
        )
        popup.open()

    def clear_history(self):
        """Limpa o hist√≥rico de leituras"""
        self.history_manager.clear_history()
        logger.info("Hist√≥rico limpo pelo usu√°rio")
    
    def show_debug_popup(self):
        """Mostra informa√ß√µes de debug"""
        debug_info = f"""üîß **INFORMA√á√ïES DE DEBUG**

üñ•Ô∏è **Sistema:**
   ‚Ä¢ Plataforma: {platform}
   ‚Ä¢ Classes Android: {'‚úÖ' if self.android_classes_loaded else '‚ùå'}
   ‚Ä¢ NFC Dispon√≠vel: {'‚úÖ' if self.nfc_available else '‚ùå'}

üìä **Estat√≠sticas:**
   ‚Ä¢ Leituras no hist√≥rico: {len(self.history_manager.get_history())}
   ‚Ä¢ M√°ximo do hist√≥rico: {self.history_manager.max_history}

‚öôÔ∏è **M√≥dulos:**
   ‚Ä¢ NFC Writer: Carregado
   ‚Ä¢ Profile Manager: Carregado  
   ‚Ä¢ Automation Engine: Carregado

üîç **Status:**
   ‚Ä¢ App inicializado: ‚úÖ
   ‚Ä¢ Interface criada: ‚úÖ
   ‚Ä¢ Decoder ativo: ‚úÖ
"""
        
        content = ScrollView()
        label = Label(
            text=debug_info,
            text_size=(dp(350), None),
            halign='left',
            valign='top',
            markup=True
        )
        content.add_widget(label)
        
        popup = Popup(
            title='üîß Debug - NFC Reader PRO',
            content=content,
            size_hint=(0.9, 0.8)
        )
        popup.open()
    
    def run_test_simulation(self):
        """Executa uma simula√ß√£o de teste"""
        # Simula uma leitura NFC
        test_content = "üß™ **SIMULA√á√ÉO DE TESTE**\n"
        test_content += f"‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n"
        test_content += "üìÑ **Tag de Teste Simulada**\n\n"
        test_content += "üìå **Registro 1:**\n"
        test_content += "   üè∑Ô∏è Tipo: Texto\n"
        test_content += "   üìù Conte√∫do: Hello World - NFC Test!\n"
        test_content += "   ‚ÑπÔ∏è Detalhes: Idioma: pt, Encoding: utf-8\n\n"
        test_content += "‚úÖ **Teste conclu√≠do!**\n"
        test_content += "üìä Total de registros: 1"
        
        self.interface.reader_interface.update_reading_content(test_content)
        self.interface.reader_interface.update_status(
            'üß™ Teste executado com sucesso!',
            '‚úÖ Simula√ß√£o de leitura NFC conclu√≠da'
        )
        
        # Adiciona ao hist√≥rico
        self.history_manager.add_reading(
            "Teste",
            "Hello World - NFC Test!",
            "simulacao_teste"
        )
    
    def show_info_popup(self):
        """Mostra informa√ß√µes do aplicativo"""
        info_text = """üîç **NFC Reader & Writer PRO v2.0**

‚ú® **Caracter√≠sticas:**
‚Ä¢ Leitura avan√ßada de tags NFC
‚Ä¢ Escrita personalizada de dados
‚Ä¢ Sistema de perfis e automa√ß√£o
‚Ä¢ Interface moderna e intuitiva
‚Ä¢ Hist√≥rico completo de leituras
‚Ä¢ Suporte a m√∫ltiplos formatos NDEF

üõ†Ô∏è **Desenvolvimento:**
‚Ä¢ Framework: Kivy
‚Ä¢ Linguagem: Python
‚Ä¢ Plataforma: Android
‚Ä¢ Arquitetura: Modular

üì± **Recursos PRO:**
‚Ä¢ Decodifica√ß√£o de m√∫ltiplos tipos
‚Ä¢ Sistema de automa√ß√£o
‚Ä¢ Integra√ß√£o com sistema Android
‚Ä¢ Exporta√ß√£o e importa√ß√£o de dados

üí° **Vers√£o 2.0 - Melhorias:**
‚Ä¢ Interface com abas
‚Ä¢ Funcionalidades de escrita
‚Ä¢ Sistema de perfis
‚Ä¢ Comandos de automa√ß√£o
"""
        
        content = ScrollView()
        label = Label(
            text=info_text,
            text_size=(dp(350), None),
            halign='left',
            valign='top',
            markup=True
        )
        content.add_widget(label)
        
        popup = Popup(
            title='‚ÑπÔ∏è Sobre o App',
            content=content,
            size_hint=(0.9, 0.8)
        )
        popup.open()


# Fun√ß√£o principal para executar o app
def main():
    """Fun√ß√£o principal"""
    try:
        NfcReaderWriterProApp().run()
    except Exception as e:
        print(f"Erro ao executar o aplicativo: {e}")
        logger.error(f"Erro cr√≠tico: {e}")


if __name__ == '__main__':
    main()
