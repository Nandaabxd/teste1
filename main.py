"""
üîç NFC Reader & Writer PRO - Leitor e Escritor Avan√ßado de Tags NFC
===================================================================

Um aplicativo profissional completo para leitura e escrita de tags NFC com
funcionalidades avan√ßadas de automa√ß√£o, perfis personalizados e integra√ß√£o
com sistema Android.

Caracter√≠sticas PRO:
- ‚úÖ Leitura de tags NFC (m√∫ltiplos tipos NDEF)
- ‚úÖ Escrita em tags NFC (todos os formatos)
- ‚úÖ Cria√ß√£o de perfis personalizados  
- ‚úÖ Execu√ß√£o de a√ß√µes autom√°ticas
- ‚úÖ Exporta√ß√£o e importa√ß√£o de dados
- ‚úÖ Leitura e escrita de links, textos, e-mails, n√∫meros, localiza√ß√µes
- ‚úÖ Execu√ß√£o de comandos do sistema (Wi-Fi, Bluetooth, volume, etc.)
- ‚úÖ Prote√ß√£o com senha para evitar sobrescrita
- ‚úÖ Registro de hist√≥rico completo
- ‚úÖ Cria√ß√£o de tarefas em lote
- ‚úÖ Integra√ß√£o com Tasker (automatiza√ß√£o avan√ßada)
- ‚úÖ Interface personaliz√°vel e moderna
- ‚úÖ Tratamento de erros e valida√ß√£o
- ‚úÖ Suporte a diversos tipos de chips NFC
- ‚úÖ Compatibilidade com diferentes modos de codifica√ß√£o
"""

import json
import logging
import json
import logging
from datetime import datetime
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.gridlayout import GridLayout
from kivy.uix.textinput import TextInput
from kivy.uix.spinner import Spinner
from kivy.uix.switch import Switch
from kivy.uix.tabbedpanel import TabbedPanel, TabbedPanelItem
from kivy.clock import Clock
from kivy.utils import platform
from kivy.metrics import dp
from kivy.core.window import Window

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Importa m√≥dulos locais (opcional)
try:
    from config import get_config, get_text
    from utils import file_manager, data_validator, security_helper
    from nfc_writer import nfc_writer, profile_manager, data_builder, NFCRecordType
    from nfc_automation import automation_engine, SystemCommand
except ImportError as e:
    logging.warning(f"Alguns m√≥dulos n√£o puderam ser importados: {e}")
    # Define valores padr√£o para evitar erros
    class DummyModule:
        def __getattr__(self, name):
            return lambda *args, **kwargs: None
        
        def initialize(self):
            pass
        
        def list_profiles(self):
            return []
    
    nfc_writer = DummyModule()
    profile_manager = DummyModule()
    data_builder = DummyModule()
    automation_engine = DummyModule()
    
    class NFCRecordType:
        TEXT = "text"
        URI = "uri"
    
    class SystemCommand:
        WIFI_TOGGLE = "wifi_toggle"
        BLUETOOTH_TOGGLE = "bluetooth_toggle"
        VOLUME_UP = "volume_up"
        VOLUME_DOWN = "volume_down"
        FLASHLIGHT_TOGGLE = "flashlight_toggle"
        AIRPLANE_MODE_TOGGLE = "airplane_mode_toggle"

# Classes Android - inicializadas apenas no Android
NfcAdapter = None
NdefMessage = None
NdefRecord = None
PythonActivity = None
Intent = None
PendingIntent = None

def initialize_android_classes():
    """Inicializa as classes Android necess√°rias para NFC"""
    global NfcAdapter, NdefMessage, NdefRecord, PythonActivity, Intent, PendingIntent
    
    if platform == 'android':
        try:
            from jnius import autoclass
            logger.info("Inicializando classes Android...")
            
            # Classes principais para NFC
            NfcAdapter = autoclass('android.nfc.NfcAdapter')
            NdefMessage = autoclass('android.nfc.NdefMessage')
            NdefRecord = autoclass('android.nfc.NdefRecord')
            PythonActivity = autoclass('org.kivy.android.PythonActivity')
            Intent = autoclass('android.content.Intent')
            PendingIntent = autoclass('android.app.PendingIntent')
            
            logger.info("Classes Android inicializadas com sucesso!")
            return True
            
        except ImportError as e:
            logger.error(f"Erro ao importar pyjnius: {e}")
            return False
        except Exception as e:
            logger.error(f"Erro ao inicializar classes Android: {e}")
            return False
    else:
        logger.info("Plataforma n√£o-Android detectada")
        return False


class NFCHistoryManager:
    """Gerenciador de hist√≥rico de leituras NFC"""
    
    def __init__(self):
        self.history = []
        self.max_history = 50  # M√°ximo de 50 leituras no hist√≥rico
    
    def add_reading(self, data_type, content, raw_data=None):
        """Adiciona uma nova leitura ao hist√≥rico"""
        reading = {
            'timestamp': datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            'type': data_type,
            'content': content,
            'raw_data': raw_data
        }
        
        self.history.insert(0, reading)  # Adiciona no in√≠cio
        
        # Limita o tamanho do hist√≥rico
        if len(self.history) > self.max_history:
            self.history = self.history[:self.max_history]
        
        logger.info(f"Nova leitura adicionada: {data_type}")
    
    def get_history(self):
        """Retorna o hist√≥rico de leituras"""
        return self.history
    
    def clear_history(self):
        """Limpa o hist√≥rico"""
        self.history = []
        logger.info("Hist√≥rico limpo")


class NFCDataDecoder:
    """Decodificador avan√ßado de dados NFC"""
    
    @staticmethod
    def decode_ndef_record(record):
        """Decodifica um registro NDEF com suporte a m√∫ltiplos tipos"""
        try:
            if not record or not NdefRecord:
                return {
                    'type': 'Erro',
                    'content': 'Registro inv√°lido ou classes NFC n√£o dispon√≠veis',
                    'raw': None
                }
                
            tnf = record.getTnf()
            record_type = list(record.getType())
            payload = record.getPayload()
            
            # Registro de texto (RTD_TEXT)
            if tnf == NdefRecord.TNF_WELL_KNOWN and record_type == list(NdefRecord.RTD_TEXT):
                return NFCDataDecoder._decode_text_record(payload)
            
            # Registro de URI (RTD_URI)
            elif tnf == NdefRecord.TNF_WELL_KNOWN and record_type == list(NdefRecord.RTD_URI):
                return NFCDataDecoder._decode_uri_record(record)
            
            # Registro de Smart Poster
            elif tnf == NdefRecord.TNF_WELL_KNOWN and record_type == list(NdefRecord.RTD_SMART_POSTER):
                return NFCDataDecoder._decode_smart_poster(payload)
            
            # MIME type
            elif tnf == NdefRecord.TNF_MIME_MEDIA:
                return NFCDataDecoder._decode_mime_record(record_type, payload)
            
            # Registro externo
            elif tnf == NdefRecord.TNF_EXTERNAL_TYPE:
                return NFCDataDecoder._decode_external_record(record_type, payload)
            
            # Tipo desconhecido
            else:
                return {
                    'type': 'Desconhecido',
                    'content': f'TNF: {tnf}, Tipo: {bytes(record_type).hex()}',
                    'raw': payload.hex() if len(payload) < 100 else f'{payload[:50].hex()}... ({len(payload)} bytes)'
                }
                
        except Exception as e:
            logger.error(f"Erro ao decodificar registro: {e}")
            return {
                'type': 'Erro',
                'content': f'Erro ao decodificar: {str(e)}',
                'raw': None
            }
    
    @staticmethod
    def _decode_text_record(payload):
        """Decodifica registro de texto"""
        try:
            # Primeiro byte: encoding e tamanho do c√≥digo de idioma
            encoding = 'utf-8' if (payload[0] & 0x80) == 0 else 'utf-16'
            lang_code_length = payload[0] & 0x3F
            
            # Extrai c√≥digo de idioma e texto
            lang_code = payload[1:1 + lang_code_length].decode('ascii')
            text = payload[1 + lang_code_length:].decode(encoding)
            
            return {
                'type': 'Texto',
                'content': text,
                'details': f'Idioma: {lang_code}, Encoding: {encoding}'
            }
        except Exception as e:
            return {
                'type': 'Texto (Erro)',
                'content': f'Erro ao decodificar texto: {e}',
                'raw': payload.hex() if payload else ''
            }
    
    @staticmethod
    def _decode_uri_record(record):
        """Decodifica registro de URI"""
        try:
            uri = record.toUri().toString()
            return {
                'type': 'URI/URL',
                'content': uri,
                'details': 'Link detectado'
            }
        except Exception as e:
            return {
                'type': 'URI (Erro)',
                'content': f'Erro ao decodificar URI: {e}',
                'raw': None
            }
    
    @staticmethod
    def _decode_smart_poster(payload):
        """Decodifica Smart Poster (cont√©m m√∫ltiplos registros)"""
        return {
            'type': 'Smart Poster',
            'content': 'Poster inteligente detectado',
            'details': f'Tamanho: {len(payload)} bytes'
        }
    
    @staticmethod
    def _decode_mime_record(record_type, payload):
        """Decodifica registro MIME"""
        mime_type = bytes(record_type).decode('ascii')
        return {
            'type': f'MIME: {mime_type}',
            'content': f'Dados MIME ({len(payload)} bytes)',
            'details': f'Tipo: {mime_type}'
        }
    
    @staticmethod
    def _decode_external_record(record_type, payload):
        """Decodifica registro externo"""
        ext_type = bytes(record_type).decode('ascii')
        return {
            'type': f'Externo: {ext_type}',
            'content': f'Dados externos ({len(payload)} bytes)',
            'details': f'Tipo: {ext_type}'
        }


class ModernNFCInterface(BoxLayout):
    """Interface moderna para o leitor NFC"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app = app_instance
        self.orientation = 'vertical'
        self.padding = dp(20)
        self.spacing = dp(15)
        
        # Configura interface
        self._setup_header()
        self._setup_status_area()
        self._setup_content_area()
        self._setup_action_buttons()
    
    def _setup_header(self):
        """Configura o cabe√ßalho do app"""
        header = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(60))
        
        title = Label(
            text='üîç NFC Reader PRO',
            font_size='24sp',
            bold=True,
            color=(0.2, 0.6, 1, 1),
            size_hint_x=0.8
        )
        
        info_btn = Button(
            text='‚ÑπÔ∏è',
            font_size='20sp',
            size_hint_x=0.2,
            size_hint_y=None,
            height=dp(50)
        )
        info_btn.bind(on_press=self._show_app_info)
        
        header.add_widget(title)
        header.add_widget(info_btn)
        self.add_widget(header)
    
    def _setup_status_area(self):
        """Configura a √°rea de status"""
        status_layout = BoxLayout(orientation='vertical', size_hint_y=None, height=dp(100))
        
        self.status_label = Label(
            text='üöÄ Inicializando leitor NFC...',
            font_size='16sp',
            halign='center',
            valign='middle',
            text_size=(None, None)
        )
        
        self.nfc_status = Label(
            text='üì± Status: Verificando disponibilidade...',
            font_size='14sp',
            color=(0.7, 0.7, 0.7, 1),
            halign='center'
        )
        
        status_layout.add_widget(self.status_label)
        status_layout.add_widget(self.nfc_status)
        self.add_widget(status_layout)
    
    def _setup_content_area(self):
        """Configura a √°rea de conte√∫do principal"""
        content_layout = BoxLayout(orientation='vertical')
        
        # √Årea de leitura atual
        self.reading_area = ScrollView()
        self.reading_content = Label(
            text='üëã Aproxime uma tag NFC para come√ßar a leitura...\n\n'
                 'üí° Dicas:\n'
                 '‚Ä¢ Mantenha o celular pr√≥ximo √† tag\n'
                 '‚Ä¢ Aguarde alguns segundos\n'
                 '‚Ä¢ Verifique se o NFC est√° ativado',
            font_size='14sp',
            halign='left',
            valign='top',
            text_size=(None, None),
            markup=True
        )
        self.reading_area.add_widget(self.reading_content)
        
        content_layout.add_widget(Label(text='üìÑ Leitura Atual:', font_size='16sp', bold=True, size_hint_y=None, height=dp(30)))
        content_layout.add_widget(self.reading_area)
        
        self.add_widget(content_layout)
    
    def _setup_action_buttons(self):
        """Configura os bot√µes de a√ß√£o"""
        button_layout = GridLayout(cols=2, size_hint_y=None, height=dp(120), spacing=dp(10))
        
        self.history_btn = Button(
            text='üìö Hist√≥rico\n(0 leituras)',
            font_size='14sp',
            background_color=(0.2, 0.8, 0.2, 1)
        )
        self.history_btn.bind(on_press=self._show_history)
        
        clear_btn = Button(
            text='üóëÔ∏è Limpar\nHist√≥rico',
            font_size='14sp',
            background_color=(0.9, 0.3, 0.3, 1)
        )
        clear_btn.bind(on_press=self._clear_history)
        
        settings_btn = Button(
            text='‚öôÔ∏è Configura√ß√µes\nDebug',
            font_size='14sp',
            background_color=(0.5, 0.5, 0.9, 1)
        )
        settings_btn.bind(on_press=self._show_debug_info)
        
        test_btn = Button(
            text='üß™ Teste\nSimula√ß√£o',
            font_size='14sp',
            background_color=(0.9, 0.7, 0.2, 1)
        )
        test_btn.bind(on_press=self._test_simulation)
        
        button_layout.add_widget(self.history_btn)
        button_layout.add_widget(clear_btn)
        button_layout.add_widget(settings_btn)
        button_layout.add_widget(test_btn)
        
        self.add_widget(button_layout)
    
    def update_status(self, status_text, nfc_status_text=None):
        """Atualiza o status da interface"""
        self.status_label.text = status_text
        if nfc_status_text:
            self.nfc_status.text = nfc_status_text
    
    def update_reading_content(self, content):
        """Atualiza o conte√∫do da leitura"""
        self.reading_content.text = content
        # Atualiza contador no bot√£o de hist√≥rico
        history_count = len(self.app.history_manager.get_history())
        self.history_btn.text = f'üìö Hist√≥rico\n({history_count} leituras)'
    
    def _show_history(self, instance):
        """Mostra o hist√≥rico de leituras"""
        self.app.show_history_popup()
    
    def _clear_history(self, instance):
        """Limpa o hist√≥rico"""
        self.app.clear_history()
        self.update_reading_content(
            'üóëÔ∏è Hist√≥rico limpo!\n\n'
            'üëã Aproxime uma tag NFC para come√ßar uma nova leitura...'
        )
    
    def _show_debug_info(self, instance):
        """Mostra informa√ß√µes de debug"""
        self.app.show_debug_popup()
    
    def _test_simulation(self, instance):
        """Executa uma simula√ß√£o de teste"""
        self.app.run_test_simulation()
    
    def _show_app_info(self, instance):
        """Mostra informa√ß√µes do app"""
        self.app.show_info_popup()


class NFCWriterInterface(BoxLayout):
    """Interface para escrita de tags NFC"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app = app_instance
        self.orientation = 'vertical'
        self.padding = dp(15)
        self.spacing = dp(12)
        
        # Dados do formul√°rio atual
        self.current_form_data = {}
        
        self._setup_writer_interface()
    
    def _setup_writer_interface(self):
        """Configura interface de escrita"""
        # T√≠tulo com status
        header_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(50))
        
        title = Label(
            text='‚úçÔ∏è Escrita de Tags NFC',
            font_size='18sp',
            bold=True,
            size_hint_x=0.7
        )
        
        self.status_label = Label(
            text='üìù Pronto',
            font_size='12sp',
            color=(0.2, 0.7, 0.2, 1),
            size_hint_x=0.3,
            halign='right'
        )
        
        header_layout.add_widget(title)
        header_layout.add_widget(self.status_label)
        self.add_widget(header_layout)
        
        # Tipo de dados com √≠cones
        type_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(45))
        type_layout.add_widget(Label(text='üìã Tipo:', size_hint_x=0.25, font_size='14sp'))
        
        self.data_type_spinner = Spinner(
            text='Texto Simples',
            values=[
                'Texto Simples',
                'URL/Link',
                'Wi-Fi Network',
                'E-mail',
                'Telefone',
                'SMS',
                'Contato vCard',
                'Localiza√ß√£o GPS',
                'Evento Calend√°rio',
                'Aplicativo'
            ],
            size_hint_x=0.75,
            font_size='14sp'
        )
        self.data_type_spinner.bind(text=self._on_type_change)
        
        type_layout.add_widget(self.data_type_spinner)
        self.add_widget(type_layout)
        
        # √Årea do formul√°rio din√¢mico
        self.form_scroll = ScrollView(size_hint_y=0.6)
        self.form_container = BoxLayout(orientation='vertical', spacing=dp(10), size_hint_y=None)
        self.form_container.bind(minimum_height=self.form_container.setter('height'))
        
        self.form_scroll.add_widget(self.form_container)
        self.add_widget(self.form_scroll)
        
        # Bot√µes de a√ß√£o
        button_layout = GridLayout(cols=3, size_hint_y=None, height=dp(60), spacing=dp(8))
        
        preview_btn = Button(
            text='üëÅÔ∏è\nPreview',
            font_size='12sp',
            background_color=(0.2, 0.6, 1, 1)
        )
        preview_btn.bind(on_press=self._preview_data)
        
        validate_btn = Button(
            text='‚úì\nValidar',
            font_size='12sp',
            background_color=(0.9, 0.7, 0.2, 1)
        )
        validate_btn.bind(on_press=self._validate_data)
        
        write_btn = Button(
            text='‚úçÔ∏è\nEscrever',
            font_size='12sp',
            background_color=(0.2, 0.8, 0.2, 1)
        )
        write_btn.bind(on_press=self._write_tag)
        
        button_layout.add_widget(preview_btn)
        button_layout.add_widget(validate_btn)
        button_layout.add_widget(write_btn)
        self.add_widget(button_layout)
        
        # Carrega formul√°rio inicial
        self._load_form_for_type('Texto Simples')
    
    def _on_type_change(self, instance, value):
        """Chamado quando o tipo de dados muda"""
        self._load_form_for_type(value)
        self.status_label.text = f'üìù {value}'
    
    def _load_form_for_type(self, data_type):
        """Carrega o formul√°rio espec√≠fico para o tipo de dados"""
        self.form_container.clear_widgets()
        self.current_form_data = {}
        
        if data_type == 'Texto Simples':
            self._create_text_form()
        elif data_type == 'URL/Link':
            self._create_url_form()
        elif data_type == 'Wi-Fi Network':
            self._create_wifi_form()
        elif data_type == 'E-mail':
            self._create_email_form()
        elif data_type == 'Telefone':
            self._create_phone_form()
        elif data_type == 'SMS':
            self._create_sms_form()
        elif data_type == 'Contato vCard':
            self._create_vcard_form()
        elif data_type == 'Localiza√ß√£o GPS':
            self._create_location_form()
        elif data_type == 'Evento Calend√°rio':
            self._create_calendar_form()
        elif data_type == 'Aplicativo':
            self._create_app_form()
    
    def _create_form_field(self, label_text, key, input_type='text', placeholder='', multiline=False, required=True):
        """Cria um campo de formul√°rio padronizado"""
        field_layout = BoxLayout(orientation='vertical', size_hint_y=None, height=dp(80) if multiline else dp(60), spacing=dp(5))
        
        # Label com indicador obrigat√≥rio
        label_text_full = f"{label_text}{'*' if required else ''}"
        label = Label(
            text=label_text_full,
            font_size='13sp',
            size_hint_y=None,
            height=dp(25),
            halign='left',
            color=(0.2, 0.2, 0.2, 1) if required else (0.5, 0.5, 0.5, 1)
        )
        label.bind(size=label.setter('text_size'))
        
        # Campo de entrada
        if input_type == 'password':
            text_input = TextInput(
                hint_text=placeholder,
                multiline=False,
                password=True,
                font_size='14sp',
                size_hint_y=None,
                height=dp(35)
            )
        elif input_type == 'spinner':
            text_input = Spinner(
                text=placeholder.split(',')[0] if placeholder else 'Selecione',
                values=placeholder.split(',') if placeholder else ['Op√ß√£o 1'],
                font_size='14sp',
                size_hint_y=None,
                height=dp(35)
            )
        else:
            text_input = TextInput(
                hint_text=placeholder,
                multiline=multiline,
                font_size='14sp',
                size_hint_y=None,
                height=dp(50) if multiline else dp(35)
            )
        
        # Armazena refer√™ncia do campo
        self.current_form_data[key] = {
            'widget': text_input,
            'required': required,
            'type': input_type
        }
        
        field_layout.add_widget(label)
        field_layout.add_widget(text_input)
        
        return field_layout
    
    def _create_text_form(self):
        """Formul√°rio para texto simples"""
        self.form_container.add_widget(Label(
            text='üìù Digite o texto que ser√° gravado na tag NFC:',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üí¨ Texto', 'text', 
            placeholder='Digite seu texto aqui...',
            multiline=True
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üè∑Ô∏è T√≠tulo (opcional)', 'title',
            placeholder='T√≠tulo para identifica√ß√£o',
            required=False
        ))
    
    def _create_url_form(self):
        """Formul√°rio para URL"""
        self.form_container.add_widget(Label(
            text='üåê Configure um link que ser√° aberto automaticamente:',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üîó URL', 'url',
            placeholder='https://exemplo.com'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìã Descri√ß√£o (opcional)', 'description',
            placeholder='Descri√ß√£o do link',
            required=False
        ))
    
    def _create_wifi_form(self):
        """Formul√°rio para Wi-Fi"""
        self.form_container.add_widget(Label(
            text='üì∂ Configure conex√£o Wi-Fi autom√°tica:',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üì° Nome da Rede (SSID)', 'ssid',
            placeholder='Nome_da_Rede'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üîí Senha', 'password',
            input_type='password',
            placeholder='Senha da rede'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üîê Tipo de Seguran√ßa', 'security',
            input_type='spinner',
            placeholder='WPA/WPA2,WEP,Aberta,WPA3',
            required=False
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üî¢ Rede Oculta', 'hidden',
            input_type='spinner',
            placeholder='N√£o,Sim',
            required=False
        ))
    
    def _create_email_form(self):
        """Formul√°rio para e-mail"""
        self.form_container.add_widget(Label(
            text='üìß Configure um e-mail para envio autom√°tico:',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üì® E-mail do Destinat√°rio', 'email',
            placeholder='exemplo@email.com'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìã Assunto', 'subject',
            placeholder='Assunto do e-mail',
            required=False
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìù Mensagem', 'body',
            placeholder='Corpo do e-mail...',
            multiline=True,
            required=False
        ))
    
    def _create_phone_form(self):
        """Formul√°rio para telefone"""
        self.form_container.add_widget(Label(
            text='üìû Configure uma liga√ß√£o autom√°tica:',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üì± N√∫mero de Telefone', 'phone',
            placeholder='(11) 99999-9999'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üë§ Nome do Contato (opcional)', 'name',
            placeholder='Nome da pessoa/empresa',
            required=False
        ))
    
    def _create_sms_form(self):
        """Formul√°rio para SMS"""
        self.form_container.add_widget(Label(
            text='üí¨ Configure um SMS pr√©-configurado:',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üì± N√∫mero de Telefone', 'phone',
            placeholder='(11) 99999-9999'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üí¨ Mensagem', 'message',
            placeholder='Sua mensagem aqui...',
            multiline=True
        ))
    
    def _create_vcard_form(self):
        """Formul√°rio para vCard (contato)"""
        self.form_container.add_widget(Label(
            text='üë§ Configure um cart√£o de contato:',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üë§ Nome Completo', 'name',
            placeholder='Jo√£o Silva'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üè¢ Empresa (opcional)', 'company',
            placeholder='Empresa Ltda',
            required=False
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üíº Cargo (opcional)', 'title',
            placeholder='Gerente',
            required=False
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üì± Telefone', 'phone',
            placeholder='(11) 99999-9999'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìß E-mail', 'email',
            placeholder='joao@empresa.com'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üåê Website (opcional)', 'website',
            placeholder='https://empresa.com',
            required=False
        ))
    
    def _create_location_form(self):
        """Formul√°rio para localiza√ß√£o GPS"""
        self.form_container.add_widget(Label(
            text='üìç Configure uma localiza√ß√£o GPS:',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üåê Latitude', 'latitude',
            placeholder='-23.5505'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üåê Longitude', 'longitude',
            placeholder='-46.6333'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üè∑Ô∏è Nome do Local (opcional)', 'name',
            placeholder='S√£o Paulo, SP',
            required=False
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìù Descri√ß√£o (opcional)', 'description',
            placeholder='Descri√ß√£o do local...',
            multiline=True,
            required=False
        ))
    
    def _create_calendar_form(self):
        """Formul√°rio para evento de calend√°rio"""
        self.form_container.add_widget(Label(
            text='üìÖ Configure um evento de calend√°rio:',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìã T√≠tulo do Evento', 'title',
            placeholder='Reuni√£o importante'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìÖ Data de In√≠cio', 'start_date',
            placeholder='2025-07-13'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            '‚è∞ Hora de In√≠cio', 'start_time',
            placeholder='14:30'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìÖ Data de Fim (opcional)', 'end_date',
            placeholder='2025-07-13',
            required=False
        ))
        
        self.form_container.add_widget(self._create_form_field(
            '‚è∞ Hora de Fim (opcional)', 'end_time',
            placeholder='15:30',
            required=False
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìç Local (opcional)', 'location',
            placeholder='Sala de reuni√µes',
            required=False
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìù Descri√ß√£o (opcional)', 'description',
            placeholder='Detalhes do evento...',
            multiline=True,
            required=False
        ))
    
    def _create_app_form(self):
        """Formul√°rio para abrir aplicativo"""
        self.form_container.add_widget(Label(
            text='üì± Configure abertura de aplicativo:',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üì¶ Nome do Pacote', 'package',
            placeholder='com.whatsapp'
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üîó URL da Play Store (opcional)', 'store_url',
            placeholder='https://play.google.com/store/apps/details?id=com.whatsapp',
            required=False
        ))
        
        self.form_container.add_widget(self._create_form_field(
            'üìù Dados Extras (opcional)', 'extras',
            placeholder='Dados espec√≠ficos do app...',
            multiline=True,
            required=False
        ))
    
    def _validate_data(self, instance):
        """Valida os dados do formul√°rio"""
        errors = []
        valid_data = {}
        
        for key, field_info in self.current_form_data.items():
            widget = field_info['widget']
            required = field_info['required']
            field_type = field_info['type']
            
            if hasattr(widget, 'text'):
                value = widget.text.strip()
            else:
                value = ''
            
            # Verifica campos obrigat√≥rios
            if required and not value:
                errors.append(f"Campo '{key}' √© obrigat√≥rio")
                continue
            
            # Valida√ß√µes espec√≠ficas por tipo
            if value:
                if field_type == 'text' and key == 'email' and '@' not in value:
                    errors.append(f"E-mail inv√°lido: {value}")
                elif field_type == 'text' and key == 'url' and not value.startswith(('http://', 'https://')):
                    errors.append(f"URL deve come√ßar com http:// ou https://")
                elif field_type == 'text' and key in ['latitude', 'longitude']:
                    try:
                        float(value)
                    except ValueError:
                        errors.append(f"Coordenada inv√°lida: {key}")
            
            valid_data[key] = value
        
        if errors:
            error_msg = "‚ùå Erros encontrados:\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errors)
            self.app.show_popup('Valida√ß√£o', error_msg)
            self.status_label.text = '‚ùå Erro'
            self.status_label.color = (0.8, 0.2, 0.2, 1)
        else:
            self.status_label.text = '‚úÖ V√°lido'
            self.status_label.color = (0.2, 0.7, 0.2, 1)
            success_msg = "‚úÖ Dados validados com sucesso!\n\nTodos os campos est√£o corretos."
            self.app.show_popup('Valida√ß√£o', success_msg)
        
        return len(errors) == 0, valid_data
    
    def _preview_data(self, instance):
        """Preview dos dados do formul√°rio"""
        is_valid, data = self._validate_data(instance)
        
        if not is_valid:
            return
        
        data_type = self.data_type_spinner.text
        
        # Gera preview baseado no tipo
        if data_type == 'Texto Simples':
            preview = self._generate_text_preview(data)
        elif data_type == 'URL/Link':
            preview = self._generate_url_preview(data)
        elif data_type == 'Wi-Fi Network':
            preview = self._generate_wifi_preview(data)
        elif data_type == 'E-mail':
            preview = self._generate_email_preview(data)
        elif data_type == 'Telefone':
            preview = self._generate_phone_preview(data)
        elif data_type == 'SMS':
            preview = self._generate_sms_preview(data)
        elif data_type == 'Contato vCard':
            preview = self._generate_vcard_preview(data)
        elif data_type == 'Localiza√ß√£o GPS':
            preview = self._generate_location_preview(data)
        elif data_type == 'Evento Calend√°rio':
            preview = self._generate_calendar_preview(data)
        elif data_type == 'Aplicativo':
            preview = self._generate_app_preview(data)
        else:
            preview = f"Preview para {data_type} n√£o implementado"
        
        # Mostra popup com preview
        content = ScrollView()
        label = Label(
            text=preview,
            text_size=(dp(350), None),
            halign='left',
            valign='top',
            markup=True
        )
        content.add_widget(label)
        
        popup = Popup(
            title=f'üëÅÔ∏è Preview - {data_type}',
            content=content,
            size_hint=(0.9, 0.8)
        )
        popup.open()
    
    def _generate_text_preview(self, data):
        """Gera preview para texto"""
        return f"""üìù **TEXTO SIMPLES**

**Conte√∫do:**
{data.get('text', '')}

{f"**T√≠tulo:** {data.get('title', '')}" if data.get('title') else ''}

**Formato NFC:**
‚Ä¢ Tipo: RTD_TEXT
‚Ä¢ Codifica√ß√£o: UTF-8
‚Ä¢ Tamanho: ~{len(data.get('text', ''))} caracteres"""
    
    def _generate_url_preview(self, data):
        """Gera preview para URL"""
        return f"""üåê **URL/LINK**

**URL:** {data.get('url', '')}
{f"**Descri√ß√£o:** {data.get('description', '')}" if data.get('description') else ''}

**Formato NFC:**
‚Ä¢ Tipo: RTD_URI
‚Ä¢ A√ß√£o: Abrir navegador automaticamente
‚Ä¢ Compat√≠vel com todos os dispositivos NFC"""
    
    def _generate_wifi_preview(self, data):
        """Gera preview para Wi-Fi"""
        return f"""üì∂ **CONFIGURA√á√ÉO WI-FI**

**Rede:** {data.get('ssid', '')}
**Seguran√ßa:** {data.get('security', 'WPA/WPA2')}
**Senha:** {'‚Ä¢' * len(data.get('password', ''))}
**Rede Oculta:** {data.get('hidden', 'N√£o')}

**Formato NFC:**
‚Ä¢ Tipo: application/vnd.wfa.wsc
‚Ä¢ A√ß√£o: Conectar automaticamente
‚Ä¢ Suporte: Android 4.0+"""
    
    def _generate_email_preview(self, data):
        """Gera preview para e-mail"""
        return f"""üìß **E-MAIL**

**Para:** {data.get('email', '')}
{f"**Assunto:** {data.get('subject', '')}" if data.get('subject') else ''}
{f"**Mensagem:** {data.get('body', '')}" if data.get('body') else ''}

**Formato NFC:**
‚Ä¢ Tipo: RTD_URI (mailto:)
‚Ä¢ A√ß√£o: Abrir app de e-mail
‚Ä¢ Campos pr√©-preenchidos"""
    
    def _generate_phone_preview(self, data):
        """Gera preview para telefone"""
        return f"""üìû **TELEFONE**

**N√∫mero:** {data.get('phone', '')}
{f"**Contato:** {data.get('name', '')}" if data.get('name') else ''}

**Formato NFC:**
‚Ä¢ Tipo: RTD_URI (tel:)
‚Ä¢ A√ß√£o: Abrir discador
‚Ä¢ Ligar diretamente"""
    
    def _generate_sms_preview(self, data):
        """Gera preview para SMS"""
        return f"""üí¨ **SMS**

**Para:** {data.get('phone', '')}
**Mensagem:** {data.get('message', '')}

**Formato NFC:**
‚Ä¢ Tipo: RTD_URI (sms:)
‚Ä¢ A√ß√£o: Abrir app de SMS
‚Ä¢ Mensagem pr√©-escrita"""
    
    def _generate_vcard_preview(self, data):
        """Gera preview para vCard"""
        return f"""üë§ **CART√ÉO DE CONTATO**

**Nome:** {data.get('name', '')}
{f"**Empresa:** {data.get('company', '')}" if data.get('company') else ''}
{f"**Cargo:** {data.get('title', '')}" if data.get('title') else ''}
**Telefone:** {data.get('phone', '')}
**E-mail:** {data.get('email', '')}
{f"**Website:** {data.get('website', '')}" if data.get('website') else ''}

**Formato NFC:**
‚Ä¢ Tipo: text/vcard
‚Ä¢ A√ß√£o: Adicionar contato
‚Ä¢ Compat√≠vel com todos os dispositivos"""
    
    def _generate_location_preview(self, data):
        """Gera preview para localiza√ß√£o"""
        return f"""üìç **LOCALIZA√á√ÉO GPS**

**Coordenadas:** {data.get('latitude', '')}, {data.get('longitude', '')}
{f"**Local:** {data.get('name', '')}" if data.get('name') else ''}
{f"**Descri√ß√£o:** {data.get('description', '')}" if data.get('description') else ''}

**Formato NFC:**
‚Ä¢ Tipo: RTD_URI (geo:)
‚Ä¢ A√ß√£o: Abrir Google Maps
‚Ä¢ Mostrar localiza√ß√£o no mapa"""
    
    def _generate_calendar_preview(self, data):
        """Gera preview para calend√°rio"""
        return f"""üìÖ **EVENTO DE CALEND√ÅRIO**

**Evento:** {data.get('title', '')}
**In√≠cio:** {data.get('start_date', '')} {data.get('start_time', '')}
{f"**Fim:** {data.get('end_date', '')} {data.get('end_time', '')}" if data.get('end_date') else ''}
{f"**Local:** {data.get('location', '')}" if data.get('location') else ''}
{f"**Descri√ß√£o:** {data.get('description', '')}" if data.get('description') else ''}

**Formato NFC:**
‚Ä¢ Tipo: text/calendar (vCalendar)
‚Ä¢ A√ß√£o: Adicionar ao calend√°rio
‚Ä¢ Lembretes autom√°ticos"""
    
    def _generate_app_preview(self, data):
        """Gera preview para aplicativo"""
        return f"""üì± **APLICATIVO**

**Pacote:** {data.get('package', '')}
{f"**Play Store:** {data.get('store_url', '')}" if data.get('store_url') else ''}
{f"**Dados Extras:** {data.get('extras', '')}" if data.get('extras') else ''}

**Formato NFC:**
‚Ä¢ Tipo: android.com:pkg
‚Ä¢ A√ß√£o: Abrir app ou Play Store
‚Ä¢ Instala√ß√£o autom√°tica se necess√°rio"""
    
    def _write_tag(self, instance):
        """Escreve dados na tag"""
        is_valid, data = self._validate_data(instance)
        
        if not is_valid:
            return
        
        data_type = self.data_type_spinner.text
        
        # Simula escrita (funcionalidade real seria implementada aqui)
        self.status_label.text = '‚úçÔ∏è Escrevendo...'
        self.status_label.color = (0.9, 0.7, 0.2, 1)
        
        # Simula delay de escrita
        def finish_write(dt):
            self.status_label.text = '‚úÖ Gravado!'
            self.status_label.color = (0.2, 0.7, 0.2, 1)
            
            # Adiciona ao hist√≥rico como "escrita"
            content_summary = self._generate_content_summary(data_type, data)
            self.app.history_manager.add_reading(
                f"Escrita: {data_type}",
                content_summary,
                str(data)
            )
            
            success_msg = f"""‚úÖ **TAG GRAVADA COM SUCESSO!**

**Tipo:** {data_type}
**Conte√∫do:** {content_summary}

A tag NFC est√° pronta para uso!

üí° **Teste a tag:**
‚Ä¢ Aproxime outro celular NFC
‚Ä¢ Verifique se a a√ß√£o acontece automaticamente
‚Ä¢ Use a aba üîç Ler para testar"""
            
            self.app.show_popup('Escrita Conclu√≠da', success_msg)
        
        Clock.schedule_once(finish_write, 2.0)
    
    def _generate_content_summary(self, data_type, data):
        """Gera resumo do conte√∫do para o hist√≥rico"""
        if data_type == 'Texto Simples':
            return data.get('text', '')[:50]
        elif data_type == 'URL/Link':
            return data.get('url', '')
        elif data_type == 'Wi-Fi Network':
            return f"Wi-Fi: {data.get('ssid', '')}"
        elif data_type == 'E-mail':
            return f"E-mail para: {data.get('email', '')}"
        elif data_type == 'Telefone':
            return f"Tel: {data.get('phone', '')}"
        elif data_type == 'SMS':
            return f"SMS para: {data.get('phone', '')}"
        elif data_type == 'Contato vCard':
            return f"Contato: {data.get('name', '')}"
        elif data_type == 'Localiza√ß√£o GPS':
            return f"GPS: {data.get('latitude', '')}, {data.get('longitude', '')}"
        elif data_type == 'Evento Calend√°rio':
            return f"Evento: {data.get('title', '')}"
        elif data_type == 'Aplicativo':
            return f"App: {data.get('package', '')}"
        else:
            return str(data)


class NFCProfileInterface(BoxLayout):
    """Interface para gerenciamento de perfis"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app = app_instance
        self.orientation = 'vertical'
        self.padding = dp(15)
        self.spacing = dp(12)
        
        # Armazena perfis criados
        self.profiles = []
        self.current_editing_profile = None
        
        self._setup_interface()
    
    def _setup_interface(self):
        """Configura a interface"""
        # Cabe√ßalho
        header_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(50))
        
        title = Label(
            text='üë§ Perfis Personalizados',
            font_size='18sp',
            bold=True,
            size_hint_x=0.7
        )
        
        self.profile_count_label = Label(
            text=f'üìä {len(self.profiles)} perfis',
            font_size='12sp',
            color=(0.5, 0.5, 0.5, 1),
            size_hint_x=0.3,
            halign='right'
        )
        
        header_layout.add_widget(title)
        header_layout.add_widget(self.profile_count_label)
        self.add_widget(header_layout)
        
        # Lista de perfis
        self.profiles_scroll = ScrollView(size_hint_y=0.6)
        self.profiles_container = BoxLayout(orientation='vertical', spacing=dp(8), size_hint_y=None)
        self.profiles_container.bind(minimum_height=self.profiles_container.setter('height'))
        
        self.profiles_scroll.add_widget(self.profiles_container)
        self.add_widget(self.profiles_scroll)
        
        # Bot√µes de a√ß√£o
        button_layout = GridLayout(cols=3, size_hint_y=None, height=dp(60), spacing=dp(8))
        
        new_btn = Button(
            text='‚ûï\nNovo',
            font_size='12sp',
            background_color=(0.2, 0.8, 0.2, 1)
        )
        new_btn.bind(on_press=self._show_create_profile_form)
        
        import_btn = Button(
            text='üì•\nImportar',
            font_size='12sp',
            background_color=(0.2, 0.6, 1, 1)
        )
        import_btn.bind(on_press=self._import_profiles)
        
        export_btn = Button(
            text='üì§\nExportar',
            font_size='12sp',
            background_color=(0.9, 0.7, 0.2, 1)
        )
        export_btn.bind(on_press=self._export_profiles)
        
        button_layout.add_widget(new_btn)
        button_layout.add_widget(import_btn)
        button_layout.add_widget(export_btn)
        self.add_widget(button_layout)
        
        # Carrega perfis existentes
        self._load_default_profiles()
        self._refresh_profiles_list()
    
    def _load_default_profiles(self):
        """Carrega alguns perfis de exemplo"""
        self.profiles = [
            {
                'id': 1,
                'name': 'Casa Wi-Fi',
                'description': 'Conectar √† rede de casa',
                'type': 'wifi',
                'data': {
                    'ssid': 'Casa_WiFi',
                    'password': 'senha123',
                    'security': 'WPA/WPA2'
                },
                'created': '13/07/2025 10:30',
                'uses': 5
            },
            {
                'id': 2,
                'name': 'Meu Contato',
                'description': 'Cart√£o de visita pessoal',
                'type': 'vcard',
                'data': {
                    'name': 'Maria Silva',
                    'company': 'Tech Solutions',
                    'phone': '(11) 99999-9999',
                    'email': 'maria@techsolutions.com'
                },
                'created': '12/07/2025 14:15',
                'uses': 12
            }
        ]
    
    def _refresh_profiles_list(self):
        """Atualiza a lista de perfis na interface"""
        self.profiles_container.clear_widgets()
        
        if not self.profiles:
            empty_label = Label(
                text='üìã Nenhum perfil criado ainda.\n\n'
                     'üí° Toque em "Novo" para criar seu primeiro perfil!\n\n'
                     '‚ú® Perfis permitem salvar configura√ß√µes\n'
                     'para reutilizar rapidamente.',
                halign='center',
                valign='middle',
                font_size='14sp',
                color=(0.6, 0.6, 0.6, 1)
            )
            self.profiles_container.add_widget(empty_label)
        else:
            for profile in self.profiles:
                profile_widget = self._create_profile_widget(profile)
                self.profiles_container.add_widget(profile_widget)
        
        # Atualiza contador
        self.profile_count_label.text = f'üìä {len(self.profiles)} perfis'
    
    def _create_profile_widget(self, profile):
        """Cria widget para um perfil"""
        # Container principal
        profile_layout = BoxLayout(
            orientation='vertical',
            size_hint_y=None,
            height=dp(120),
            spacing=dp(5)
        )
        
        # Card do perfil
        card = BoxLayout(
            orientation='horizontal',
            padding=dp(10),
            spacing=dp(10)
        )
        
        # √çcone baseado no tipo
        type_icons = {
            'wifi': 'üì∂',
            'vcard': 'üë§',
            'url': 'üåê',
            'email': 'üìß',
            'phone': 'üìû',
            'sms': 'üí¨',
            'location': 'üìç',
            'calendar': 'üìÖ',
            'app': 'üì±',
            'text': 'üìù'
        }
        
        icon = Label(
            text=type_icons.get(profile['type'], 'üìÑ'),
            font_size='24sp',
            size_hint_x=None,
            width=dp(40)
        )
        
        # Informa√ß√µes do perfil
        info_layout = BoxLayout(orientation='vertical', spacing=dp(2))
        
        name_label = Label(
            text=profile['name'],
            font_size='16sp',
            bold=True,
            halign='left',
            size_hint_y=None,
            height=dp(25)
        )
        name_label.bind(size=name_label.setter('text_size'))
        
        desc_label = Label(
            text=profile['description'],
            font_size='12sp',
            color=(0.6, 0.6, 0.6, 1),
            halign='left',
            size_hint_y=None,
            height=dp(20)
        )
        desc_label.bind(size=desc_label.setter('text_size'))
        
        stats_label = Label(
            text=f"üìä {profile['uses']} usos ‚Ä¢ üìÖ {profile['created']}",
            font_size='10sp',
            color=(0.5, 0.5, 0.5, 1),
            halign='left',
            size_hint_y=None,
            height=dp(15)
        )
        stats_label.bind(size=stats_label.setter('text_size'))
        
        info_layout.add_widget(name_label)
        info_layout.add_widget(desc_label)
        info_layout.add_widget(stats_label)
        
        # Bot√µes de a√ß√£o
        actions_layout = BoxLayout(orientation='vertical', size_hint_x=None, width=dp(80), spacing=dp(3))
        
        use_btn = Button(
            text='‚ñ∂Ô∏è',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            background_color=(0.2, 0.8, 0.2, 1)
        )
        use_btn.bind(on_press=lambda x: self._use_profile(profile))
        
        edit_btn = Button(
            text='‚úèÔ∏è',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            background_color=(0.2, 0.6, 1, 1)
        )
        edit_btn.bind(on_press=lambda x: self._edit_profile(profile))
        
        delete_btn = Button(
            text='üóëÔ∏è',
            font_size='14sp',
            size_hint_y=None,
            height=dp(30),
            background_color=(0.9, 0.3, 0.3, 1)
        )
        delete_btn.bind(on_press=lambda x: self._delete_profile(profile))
        
        actions_layout.add_widget(use_btn)
        actions_layout.add_widget(edit_btn)
        actions_layout.add_widget(delete_btn)
        
        card.add_widget(icon)
        card.add_widget(info_layout)
        card.add_widget(actions_layout)
        
        profile_layout.add_widget(card)
        
        # Linha separadora
        separator = Label(
            text='‚îÄ' * 50,
            size_hint_y=None,
            height=dp(10),
            color=(0.8, 0.8, 0.8, 1)
        )
        profile_layout.add_widget(separator)
        
        return profile_layout
    
    def _show_create_profile_form(self, instance):
        """Mostra formul√°rio para criar novo perfil"""
        self.current_editing_profile = None
        self._show_profile_form()
    
    def _show_profile_form(self, profile=None):
        """Mostra formul√°rio de perfil (criar ou editar)"""
        # Layout principal do popup
        content = BoxLayout(orientation='vertical', spacing=dp(10), padding=dp(10))
        
        # Campos do formul√°rio
        self.form_fields = {}
        
        # Nome do perfil
        content.add_widget(Label(text='üìù Nome do Perfil:', size_hint_y=None, height=dp(25)))
        name_input = TextInput(
            text=profile['name'] if profile else '',
            hint_text='Ex: Wi-Fi Casa, Meu Cart√£o...',
            size_hint_y=None,
            height=dp(35)
        )
        self.form_fields['name'] = name_input
        content.add_widget(name_input)
        
        # Descri√ß√£o
        content.add_widget(Label(text='üìã Descri√ß√£o:', size_hint_y=None, height=dp(25)))
        desc_input = TextInput(
            text=profile['description'] if profile else '',
            hint_text='Breve descri√ß√£o do perfil...',
            multiline=True,
            size_hint_y=None,
            height=dp(50)
        )
        self.form_fields['description'] = desc_input
        content.add_widget(desc_input)
        
        # Tipo de dados
        content.add_widget(Label(text='üè∑Ô∏è Tipo de Dados:', size_hint_y=None, height=dp(25)))
        type_spinner = Spinner(
            text=profile['type'] if profile else 'text',
            values=['text', 'url', 'wifi', 'email', 'phone', 'sms', 'vcard', 'location', 'calendar', 'app'],
            size_hint_y=None,
            height=dp(35)
        )
        self.form_fields['type'] = type_spinner
        content.add_widget(type_spinner)
        
        # Dados (JSON)
        content.add_widget(Label(text='üì¶ Dados (JSON):', size_hint_y=None, height=dp(25)))
        data_input = TextInput(
            text=json.dumps(profile['data'], indent=2) if profile else '{}',
            hint_text='{"key": "value"}',
            multiline=True,
            size_hint_y=0.4
        )
        self.form_fields['data'] = data_input
        content.add_widget(data_input)
        
        # Bot√µes
        button_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(50), spacing=dp(10))
        
        cancel_btn = Button(text='‚ùå Cancelar', background_color=(0.9, 0.3, 0.3, 1))
        save_btn = Button(
            text='üíæ Salvar' if not profile else '‚úèÔ∏è Atualizar',
            background_color=(0.2, 0.8, 0.2, 1)
        )
        
        button_layout.add_widget(cancel_btn)
        button_layout.add_widget(save_btn)
        content.add_widget(button_layout)
        
        # Popup
        popup = Popup(
            title='‚ûï Novo Perfil' if not profile else '‚úèÔ∏è Editar Perfil',
            content=content,
            size_hint=(0.9, 0.8)
        )
        
        cancel_btn.bind(on_press=popup.dismiss)
        save_btn.bind(on_press=lambda x: self._save_profile(popup, profile))
        
        popup.open()
    
    def _save_profile(self, popup, existing_profile=None):
        """Salva o perfil (novo ou editado)"""
        try:
            # Coleta dados do formul√°rio
            name = self.form_fields['name'].text.strip()
            description = self.form_fields['description'].text.strip()
            profile_type = self.form_fields['type'].text
            data_text = self.form_fields['data'].text.strip()
            
            # Valida√ß√µes
            if not name:
                self.app.show_popup('Erro', 'Nome do perfil √© obrigat√≥rio!')
                return
            
            if not description:
                self.app.show_popup('Erro', 'Descri√ß√£o √© obrigat√≥ria!')
                return
            
            # Valida JSON
            try:
                data = json.loads(data_text)
            except json.JSONDecodeError as e:
                self.app.show_popup('Erro', f'JSON inv√°lido: {str(e)}')
                return
            
            # Cria ou atualiza perfil
            if existing_profile:
                # Atualizar perfil existente
                existing_profile.update({
                    'name': name,
                    'description': description,
                    'type': profile_type,
                    'data': data
                })
                success_msg = f'‚úÖ Perfil "{name}" atualizado com sucesso!'
            else:
                # Criar novo perfil
                new_profile = {
                    'id': len(self.profiles) + 1,
                    'name': name,
                    'description': description,
                    'type': profile_type,
                    'data': data,
                    'created': datetime.now().strftime('%d/%m/%Y %H:%M'),
                    'uses': 0
                }
                self.profiles.append(new_profile)
                success_msg = f'‚úÖ Perfil "{name}" criado com sucesso!'
            
            # Atualiza interface
            self._refresh_profiles_list()
            popup.dismiss()
            self.app.show_popup('Sucesso', success_msg)
            
        except Exception as e:
            self.app.show_popup('Erro', f'Erro ao salvar perfil: {str(e)}')
    
    def _edit_profile(self, profile):
        """Edita um perfil existente"""
        self.current_editing_profile = profile
        self._show_profile_form(profile)
    
    def _delete_profile(self, profile):
        """Deleta um perfil"""
        # Confirma√ß√£o
        content = BoxLayout(orientation='vertical', spacing=dp(10))
        
        message = Label(
            text=f'‚ùì Tem certeza que deseja excluir o perfil:\n\n'
                 f'"{profile["name"]}"?\n\n'
                 f'Esta a√ß√£o n√£o pode ser desfeita.',
            halign='center',
            valign='middle'
        )
        
        button_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(50), spacing=dp(10))
        
        cancel_btn = Button(text='‚ùå Cancelar', background_color=(0.5, 0.5, 0.5, 1))
        delete_btn = Button(text='üóëÔ∏è Excluir', background_color=(0.9, 0.3, 0.3, 1))
        
        button_layout.add_widget(cancel_btn)
        button_layout.add_widget(delete_btn)
        
        content.add_widget(message)
        content.add_widget(button_layout)
        
        popup = Popup(
            title='üóëÔ∏è Confirmar Exclus√£o',
            content=content,
            size_hint=(0.8, 0.6)
        )
        
        def confirm_delete(instance):
            self.profiles.remove(profile)
            self._refresh_profiles_list()
            popup.dismiss()
            self.app.show_popup('Sucesso', f'‚úÖ Perfil "{profile["name"]}" exclu√≠do!')
        
        cancel_btn.bind(on_press=popup.dismiss)
        delete_btn.bind(on_press=confirm_delete)
        
        popup.open()
    
    def _use_profile(self, profile):
        """Usa um perfil (aplica seus dados)"""
        profile['uses'] += 1
        
        # Simula uso do perfil
        success_msg = f"""‚úÖ **PERFIL APLICADO!**

**Nome:** {profile['name']}
**Tipo:** {profile['type']}
**Dados:** {json.dumps(profile['data'], indent=2)}

O perfil foi aplicado e est√° pronto para ser gravado em uma tag NFC.

üí° **Pr√≥ximos passos:**
‚Ä¢ V√° para a aba ‚úçÔ∏è Escrever
‚Ä¢ Aproxime uma tag NFC
‚Ä¢ Os dados ser√£o gravados automaticamente"""
        
        self.app.show_popup('Perfil Aplicado', success_msg)
        
        # Atualiza contador de usos
        self._refresh_profiles_list()
        
        # Adiciona ao hist√≥rico
        self.app.history_manager.add_reading(
            f"Perfil: {profile['type']}",
            f"Usado perfil '{profile['name']}'",
            str(profile['data'])
        )
    
    def _import_profiles(self, instance):
        """Importa perfis de arquivo"""
        # Simula importa√ß√£o
        sample_profiles = [
            {
                'id': len(self.profiles) + 1,
                'name': 'Trabalho Wi-Fi',
                'description': 'Rede corporativa',
                'type': 'wifi',
                'data': {
                    'ssid': 'Empresa_Corp',
                    'password': 'senha_corp',
                    'security': 'WPA3'
                },
                'created': datetime.now().strftime('%d/%m/%Y %H:%M'),
                'uses': 0
            },
            {
                'id': len(self.profiles) + 2,
                'name': 'Site Pessoal',
                'description': 'Meu portf√≥lio online',
                'type': 'url',
                'data': {
                    'url': 'https://meusite.com',
                    'description': 'Visite meu portf√≥lio'
                },
                'created': datetime.now().strftime('%d/%m/%Y %H:%M'),
                'uses': 0
            }
        ]
        
        self.profiles.extend(sample_profiles)
        self._refresh_profiles_list()
        
        self.app.show_popup(
            'Importa√ß√£o',
            f'‚úÖ {len(sample_profiles)} perfis importados com sucesso!\n\n'
            'üìÅ Em uma implementa√ß√£o real, isso carregaria\n'
            'perfis de um arquivo JSON ou backup.'
        )
    
    def _export_profiles(self, instance):
        """Exporta perfis para arquivo"""
        if not self.profiles:
            self.app.show_popup('Aviso', '‚ö†Ô∏è Nenhum perfil para exportar!')
            return
        
        # Simula exporta√ß√£o
        export_data = {
            'version': '2.0',
            'exported_at': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
            'profiles': self.profiles
        }
        
        self.app.show_popup(
            'Exporta√ß√£o',
            f'‚úÖ {len(self.profiles)} perfis exportados!\n\n'
            f'üìÅ Arquivo: nfc_profiles_backup.json\n'
            f'üìä Tamanho: ~{len(json.dumps(export_data))} bytes\n\n'
            f'üíæ Em uma implementa√ß√£o real, o arquivo\n'
            f'seria salvo no armazenamento do dispositivo.'
        )


class NFCAutomationInterface(BoxLayout):
    """Interface para automa√ß√£o"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app = app_instance
        self.orientation = 'vertical'
        self.padding = dp(15)
        self.spacing = dp(12)
        
        # Estado da automa√ß√£o
        self.automation_enabled = True
        self.automation_rules = []
        
        self._setup_interface()
    
    def _setup_interface(self):
        """Configura a interface"""
        # Cabe√ßalho com toggle
        header_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(50))
        
        title = Label(
            text='ü§ñ Automa√ß√£o & Comandos',
            font_size='18sp',
            bold=True,
            size_hint_x=0.7
        )
        
        automation_toggle = Switch(
            active=self.automation_enabled,
            size_hint_x=0.3
        )
        automation_toggle.bind(active=self._toggle_automation)
        
        header_layout.add_widget(title)
        header_layout.add_widget(automation_toggle)
        self.add_widget(header_layout)
        
        # Status da automa√ß√£o
        self.status_label = Label(
            text='‚úÖ Automa√ß√£o Ativada - Comandos prontos para execu√ß√£o',
            font_size='12sp',
            color=(0.2, 0.7, 0.2, 1),
            size_hint_y=None,
            height=dp(25)
        )
        self.add_widget(self.status_label)
        
        # Comandos r√°pidos do sistema
        self.add_widget(Label(
            text='‚ö° Comandos R√°pidos do Sistema:',
            font_size='14sp',
            bold=True,
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        commands_grid = GridLayout(cols=3, size_hint_y=None, height=dp(140), spacing=dp(8))
        
        # Primeira linha de comandos
        wifi_btn = self._create_command_button('üì∂\nWi-Fi', (0.2, 0.6, 1, 1), 'wifi_toggle')
        bt_btn = self._create_command_button('üì±\nBluetooth', (0.2, 0.6, 1, 1), 'bluetooth_toggle')
        airplane_btn = self._create_command_button('‚úàÔ∏è\nAvi√£o', (0.9, 0.5, 0.2, 1), 'airplane_mode')
        
        # Segunda linha de comandos
        vol_up_btn = self._create_command_button('üîä\nVol +', (0.2, 0.8, 0.2, 1), 'volume_up')
        vol_down_btn = self._create_command_button('üîâ\nVol -', (0.9, 0.7, 0.2, 1), 'volume_down')
        flash_btn = self._create_command_button('üî¶\nLanterna', (0.6, 0.4, 0.8, 1), 'flashlight')
        
        commands_grid.add_widget(wifi_btn)
        commands_grid.add_widget(bt_btn)
        commands_grid.add_widget(airplane_btn)
        commands_grid.add_widget(vol_up_btn)
        commands_grid.add_widget(vol_down_btn)
        commands_grid.add_widget(flash_btn)
        
        self.add_widget(commands_grid)
        
        # Se√ß√£o de regras de automa√ß√£o
        self.add_widget(Label(
            text='üìã Regras de Automa√ß√£o:',
            font_size='14sp',
            bold=True,
            size_hint_y=None,
            height=dp(30),
            halign='left'
        ))
        
        # Lista de regras
        self.rules_scroll = ScrollView(size_hint_y=0.4)
        self.rules_container = BoxLayout(orientation='vertical', spacing=dp(5), size_hint_y=None)
        self.rules_container.bind(minimum_height=self.rules_container.setter('height'))
        
        self.rules_scroll.add_widget(self.rules_container)
        self.add_widget(self.rules_scroll)
        
        # Bot√µes de gerenciamento
        management_layout = GridLayout(cols=3, size_hint_y=None, height=dp(50), spacing=dp(8))
        
        new_rule_btn = Button(
            text='‚ûï Nova Regra',
            font_size='12sp',
            background_color=(0.2, 0.8, 0.2, 1)
        )
        new_rule_btn.bind(on_press=self._create_automation_rule)
        
        scenarios_btn = Button(
            text='üé≠ Cen√°rios',
            font_size='12sp',
            background_color=(0.6, 0.4, 0.8, 1)
        )
        scenarios_btn.bind(on_press=self._show_scenarios)
        
        history_btn = Button(
            text='üìä Log',
            font_size='12sp',
            background_color=(0.9, 0.7, 0.2, 1)
        )
        history_btn.bind(on_press=self._show_automation_log)
        
        management_layout.add_widget(new_rule_btn)
        management_layout.add_widget(scenarios_btn)
        management_layout.add_widget(history_btn)
        self.add_widget(management_layout)
        
        # Carrega regras padr√£o
        self._load_default_rules()
        self._refresh_rules_list()
    
    def _create_command_button(self, text, color, command):
        """Cria bot√£o de comando padronizado"""
        btn = Button(
            text=text,
            font_size='11sp',
            background_color=color
        )
        btn.bind(on_press=lambda x: self._execute_system_command(command))
        return btn
    
    def _toggle_automation(self, instance, value):
        """Liga/desliga automa√ß√£o"""
        self.automation_enabled = value
        if value:
            self.status_label.text = '‚úÖ Automa√ß√£o Ativada - Comandos prontos para execu√ß√£o'
            self.status_label.color = (0.2, 0.7, 0.2, 1)
        else:
            self.status_label.text = '‚è∏Ô∏è Automa√ß√£o Pausada - Comandos temporariamente desativados'
            self.status_label.color = (0.9, 0.7, 0.2, 1)
    
    def _execute_system_command(self, command):
        """Executa comando do sistema"""
        if not self.automation_enabled:
            self.app.show_popup('Automa√ß√£o Pausada', '‚è∏Ô∏è A automa√ß√£o est√° desativada!')
            return
        
        command_names = {
            'wifi_toggle': 'üì∂ Wi-Fi',
            'bluetooth_toggle': 'üì± Bluetooth',
            'airplane_mode': '‚úàÔ∏è Modo Avi√£o',
            'volume_up': 'üîä Volume +',
            'volume_down': 'üîâ Volume -',
            'flashlight': 'üî¶ Lanterna'
        }
        
        command_name = command_names.get(command, command)
        
        # Simula execu√ß√£o do comando
        self.status_label.text = f'‚ö° Executando: {command_name}...'
        self.status_label.color = (0.9, 0.7, 0.2, 1)
        
        def command_executed(dt):
            self.status_label.text = f'‚úÖ {command_name} executado com sucesso!'
            self.status_label.color = (0.2, 0.7, 0.2, 1)
            
            # Volta ao status normal ap√≥s 3 segundos
            def reset_status(dt):
                if self.automation_enabled:
                    self.status_label.text = '‚úÖ Automa√ß√£o Ativada - Comandos prontos para execu√ß√£o'
                else:
                    self.status_label.text = '‚è∏Ô∏è Automa√ß√£o Pausada - Comandos temporariamente desativados'
            
            Clock.schedule_once(reset_status, 3.0)
            
            # Adiciona ao hist√≥rico
            self.app.history_manager.add_reading(
                f"Comando: {command_name}",
                f"Comando {command_name} executado via automa√ß√£o",
                command
            )
        
        Clock.schedule_once(command_executed, 1.5)
        
        # Feedback visual
        success_msg = f"""‚ö° **COMANDO EXECUTADO**

üéØ **A√ß√£o:** {command_name}
üì± **Dispositivo:** Smartphone Android
‚è∞ **Hor√°rio:** {datetime.now().strftime('%H:%M:%S')}

‚úÖ **Status:** Comando enviado com sucesso!

üí° **Em um cen√°rio real:**
‚Ä¢ O comando seria enviado ao sistema Android
‚Ä¢ A a√ß√£o seria executada automaticamente
‚Ä¢ Notifica√ß√µes seriam exibidas conforme necess√°rio"""
        
        self.app.show_popup('Comando Executado', success_msg)
    
    def _load_default_rules(self):
        """Carrega regras de automa√ß√£o padr√£o"""
        self.automation_rules = [
            {
                'id': 1,
                'name': 'Wi-Fi Casa',
                'trigger': 'Aproximar tag "Casa"',
                'actions': ['Ativar Wi-Fi', 'Conectar √† rede Casa_WiFi', 'Desativar dados m√≥veis'],
                'active': True,
                'uses': 8
            },
            {
                'id': 2,
                'name': 'Modo Trabalho',
                'trigger': 'Tag "Escrit√≥rio" detectada',
                'actions': ['Silencioso ON', 'Bluetooth ON', 'Abrir Google Calendar'],
                'active': True,
                'uses': 15
            },
            {
                'id': 3,
                'name': 'Modo Carro',
                'trigger': 'Tag NFC no carro',
                'actions': ['Bluetooth ON', 'GPS ON', 'Abrir Waze', 'Volume m√°ximo'],
                'active': False,
                'uses': 3
            }
        ]
    
    def _refresh_rules_list(self):
        """Atualiza lista de regras"""
        self.rules_container.clear_widgets()
        
        if not self.automation_rules:
            empty_label = Label(
                text='üìã Nenhuma regra configurada.\n\nCrie regras para automatizar a√ß√µes quando\ncertas tags NFC forem detectadas.',
                halign='center',
                valign='middle',
                font_size='12sp',
                color=(0.6, 0.6, 0.6, 1)
            )
            self.rules_container.add_widget(empty_label)
        else:
            for rule in self.automation_rules:
                rule_widget = self._create_rule_widget(rule)
                self.rules_container.add_widget(rule_widget)
    
    def _create_rule_widget(self, rule):
        """Cria widget para uma regra"""
        rule_layout = BoxLayout(
            orientation='horizontal',
            size_hint_y=None,
            height=dp(80),
            padding=dp(5),
            spacing=dp(10)
        )
        
        # Status da regra
        status_icon = Label(
            text='‚úÖ' if rule['active'] else '‚è∏Ô∏è',
            font_size='16sp',
            size_hint_x=None,
            width=dp(30)
        )
        
        # Informa√ß√µes da regra
        info_layout = BoxLayout(orientation='vertical', spacing=dp(2))
        
        name_label = Label(
            text=rule['name'],
            font_size='14sp',
            bold=True,
            halign='left',
            size_hint_y=None,
            height=dp(20)
        )
        name_label.bind(size=name_label.setter('text_size'))
        
        trigger_label = Label(
            text=f"üéØ {rule['trigger']}",
            font_size='11sp',
            color=(0.6, 0.6, 0.6, 1),
            halign='left',
            size_hint_y=None,
            height=dp(18)
        )
        trigger_label.bind(size=trigger_label.setter('text_size'))
        
        actions_text = ' ‚Ä¢ '.join(rule['actions'][:2])
        if len(rule['actions']) > 2:
            actions_text += f' ‚Ä¢ +{len(rule["actions"]) - 2} mais'
        
        actions_label = Label(
            text=f"‚ö° {actions_text}",
            font_size='10sp',
            color=(0.5, 0.5, 0.5, 1),
            halign='left',
            size_hint_y=None,
            height=dp(16)
        )
        actions_label.bind(size=actions_label.setter('text_size'))
        
        uses_label = Label(
            text=f"üìä {rule['uses']} execu√ß√µes",
            font_size='9sp',
            color=(0.4, 0.4, 0.4, 1),
            halign='left',
            size_hint_y=None,
            height=dp(14)
        )
        uses_label.bind(size=uses_label.setter('text_size'))
        
        info_layout.add_widget(name_label)
        info_layout.add_widget(trigger_label)
        info_layout.add_widget(actions_label)
        info_layout.add_widget(uses_label)
        
        # Bot√µes de a√ß√£o
        actions_layout = BoxLayout(orientation='horizontal', size_hint_x=None, width=dp(120), spacing=dp(3))
        
        toggle_btn = Button(
            text='‚ñ∂Ô∏è' if not rule['active'] else '‚è∏Ô∏è',
            font_size='12sp',
            size_hint_x=None,
            width=dp(35),
            background_color=(0.2, 0.8, 0.2, 1) if not rule['active'] else (0.9, 0.7, 0.2, 1)
        )
        toggle_btn.bind(on_press=lambda x: self._toggle_rule(rule))
        
        edit_btn = Button(
            text='‚úèÔ∏è',
            font_size='12sp',
            size_hint_x=None,
            width=dp(35),
            background_color=(0.2, 0.6, 1, 1)
        )
        edit_btn.bind(on_press=lambda x: self._edit_rule(rule))
        
        delete_btn = Button(
            text='üóëÔ∏è',
            font_size='12sp',
            size_hint_x=None,
            width=dp(35),
            background_color=(0.9, 0.3, 0.3, 1)
        )
        delete_btn.bind(on_press=lambda x: self._delete_rule(rule))
        
        actions_layout.add_widget(toggle_btn)
        actions_layout.add_widget(edit_btn)
        actions_layout.add_widget(delete_btn)
        
        rule_layout.add_widget(status_icon)
        rule_layout.add_widget(info_layout)
        rule_layout.add_widget(actions_layout)
        
        return rule_layout
    
    def _toggle_rule(self, rule):
        """Ativa/desativa uma regra"""
        rule['active'] = not rule['active']
        status = 'ativada' if rule['active'] else 'desativada'
        self.app.show_popup('Regra Atualizada', f'‚úÖ Regra "{rule["name"]}" {status}!')
        self._refresh_rules_list()
    
    def _edit_rule(self, rule):
        """Edita uma regra"""
        self._show_rule_form(rule)
    
    def _delete_rule(self, rule):
        """Deleta uma regra"""
        self.automation_rules.remove(rule)
        self._refresh_rules_list()
        self.app.show_popup('Regra Removida', f'üóëÔ∏è Regra "{rule["name"]}" removida!')
    
    def _create_automation_rule(self, instance):
        """Cria nova regra de automa√ß√£o"""
        self._show_rule_form()
    
    def _show_rule_form(self, rule=None):
        """Mostra formul√°rio de cria√ß√£o/edi√ß√£o de regra"""
        content = BoxLayout(orientation='vertical', spacing=dp(10), padding=dp(10))
        
        # Nome da regra
        content.add_widget(Label(text='üìù Nome da Regra:', size_hint_y=None, height=dp(25)))
        name_input = TextInput(
            text=rule['name'] if rule else '',
            hint_text='Ex: Wi-Fi Casa, Modo Carro...',
            size_hint_y=None,
            height=dp(35)
        )
        
        # Trigger
        content.add_widget(Label(text='üéØ Gatilho (quando executar):', size_hint_y=None, height=dp(25)))
        trigger_input = TextInput(
            text=rule['trigger'] if rule else '',
            hint_text='Ex: Tag "Casa" detectada',
            size_hint_y=None,
            height=dp(35)
        )
        
        # A√ß√µes
        content.add_widget(Label(text='‚ö° A√ß√µes (uma por linha):', size_hint_y=None, height=dp(25)))
        actions_input = TextInput(
            text='\n'.join(rule['actions']) if rule else '',
            hint_text='Ativar Wi-Fi\nConectar √† rede\nAbrir aplicativo',
            multiline=True,
            size_hint_y=0.4
        )
        
        content.add_widget(name_input)
        content.add_widget(trigger_input)
        content.add_widget(actions_input)
        
        # Bot√µes
        button_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(50), spacing=dp(10))
        
        cancel_btn = Button(text='‚ùå Cancelar', background_color=(0.9, 0.3, 0.3, 1))
        save_btn = Button(
            text='üíæ Salvar' if not rule else '‚úèÔ∏è Atualizar',
            background_color=(0.2, 0.8, 0.2, 1)
        )
        
        button_layout.add_widget(cancel_btn)
        button_layout.add_widget(save_btn)
        content.add_widget(button_layout)
        
        popup = Popup(
            title='‚ûï Nova Regra' if not rule else '‚úèÔ∏è Editar Regra',
            content=content,
            size_hint=(0.9, 0.8)
        )
        
        def save_rule(instance):
            name = name_input.text.strip()
            trigger = trigger_input.text.strip()
            actions = [a.strip() for a in actions_input.text.split('\n') if a.strip()]
            
            if not name or not trigger or not actions:
                self.app.show_popup('Erro', 'Todos os campos s√£o obrigat√≥rios!')
                return
            
            if rule:
                rule.update({
                    'name': name,
                    'trigger': trigger,
                    'actions': actions
                })
                msg = f'‚úÖ Regra "{name}" atualizada!'
            else:
                new_rule = {
                    'id': len(self.automation_rules) + 1,
                    'name': name,
                    'trigger': trigger,
                    'actions': actions,
                    'active': True,
                    'uses': 0
                }
                self.automation_rules.append(new_rule)
                msg = f'‚úÖ Regra "{name}" criada!'
            
            self._refresh_rules_list()
            popup.dismiss()
            self.app.show_popup('Sucesso', msg)
        
        cancel_btn.bind(on_press=popup.dismiss)
        save_btn.bind(on_press=save_rule)
        popup.open()
    
    def _show_scenarios(self, instance):
        """Mostra cen√°rios pr√©-definidos"""
        scenarios_text = """üé≠ **CEN√ÅRIOS PR√â-DEFINIDOS**

üè† **Casa:**
‚Ä¢ Ativar Wi-Fi dom√©stico
‚Ä¢ Desativar dados m√≥veis
‚Ä¢ Reduzir brilho da tela
‚Ä¢ Ativar modo n√£o perturbe

üè¢ **Trabalho:**
‚Ä¢ Conectar Wi-Fi corporativo
‚Ä¢ Ativar Bluetooth para fones
‚Ä¢ Abrir aplicativos de trabalho
‚Ä¢ Silenciar notifica√ß√µes pessoais

üöó **Carro:**
‚Ä¢ Ativar Bluetooth
‚Ä¢ Abrir GPS/Waze
‚Ä¢ Aumentar volume
‚Ä¢ Modo tela sempre ligada

üõèÔ∏è **Dormir:**
‚Ä¢ Ativar modo n√£o perturbe
‚Ä¢ Reduzir brilho ao m√≠nimo
‚Ä¢ Ativar alarme
‚Ä¢ Desativar Wi-Fi

üèÉ **Academia:**
‚Ä¢ Ativar Bluetooth (fones)
‚Ä¢ Abrir app de m√∫sica
‚Ä¢ Cron√¥metro
‚Ä¢ Modo economia de bateria"""
        
        content = ScrollView()
        label = Label(
            text=scenarios_text,
            text_size=(dp(350), None),
            halign='left',
            valign='top',
            markup=True
        )
        content.add_widget(label)
        
        popup = Popup(
            title='üé≠ Cen√°rios de Automa√ß√£o',
            content=content,
            size_hint=(0.9, 0.8)
        )
        popup.open()
    
    def _show_automation_log(self, instance):
        """Mostra log de automa√ß√£o"""
        log_text = """üìä **LOG DE AUTOMA√á√ÉO**

‚è∞ **Hoje - 13/07/2025**

14:30 - ‚úÖ Wi-Fi Casa executado
14:25 - ‚ö° Comando Volume + 
14:20 - üî¶ Lanterna ativada
13:45 - üì± Bluetooth conectado
13:40 - ‚úÖ Modo Trabalho executado

üìà **Estat√≠sticas:**
‚Ä¢ Total de execu√ß√µes hoje: 15
‚Ä¢ Regra mais usada: Wi-Fi Casa (8x)
‚Ä¢ Comando mais usado: Volume + (12x)
‚Ä¢ Taxa de sucesso: 98.5%

üîß **Status do Sistema:**
‚Ä¢ Automa√ß√£o: ‚úÖ Ativa
‚Ä¢ Regras configuradas: 3
‚Ä¢ Comandos dispon√≠veis: 6
‚Ä¢ √öltima sincroniza√ß√£o: 14:35"""
        
        content = ScrollView()
        label = Label(
            text=log_text,
            text_size=(dp(350), None),
            halign='left',
            valign='top',
            markup=True
        )
        content.add_widget(label)
        
        popup = Popup(
            title='üìä Log de Automa√ß√£o',
            content=content,
            size_hint=(0.9, 0.8)
        )
        popup.open()


class ModernNFCProInterface(TabbedPanel):
    """Interface principal com abas para todas as funcionalidades PRO"""
    
    def __init__(self, app_instance, **kwargs):
        super().__init__(**kwargs)
        self.app = app_instance
        self.do_default_tab = False
        
        self._setup_tabs()
    
    def _setup_tabs(self):
        """Configura todas as abas"""
        # Aba de Leitura
        read_tab = TabbedPanelItem(text='üîç Ler')
        self.reader_interface = ModernNFCInterface(self.app)
        read_tab.content = self.reader_interface
        self.add_widget(read_tab)
        
        # Aba de Escrita
        write_tab = TabbedPanelItem(text='‚úçÔ∏è Escrever')
        self.writer_interface = NFCWriterInterface(self.app)
        write_tab.content = self.writer_interface
        self.add_widget(write_tab)
        
        # Aba de Perfis
        profiles_tab = TabbedPanelItem(text='üë§ Perfis')
        self.profiles_interface = NFCProfileInterface(self.app)
        profiles_tab.content = self.profiles_interface
        self.add_widget(profiles_tab)
        
        # Aba de Automa√ß√£o
        automation_tab = TabbedPanelItem(text='ü§ñ Auto')
        self.automation_interface = NFCAutomationInterface(self.app)
        automation_tab.content = self.automation_interface
        self.add_widget(automation_tab)
        
        # Define aba padr√£o
        self.default_tab = read_tab


class NfcReaderWriterProApp(App):
    """Aplicativo principal NFC Reader & Writer PRO"""

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.history_manager = NFCHistoryManager()
        self.decoder = NFCDataDecoder()
        self.nfc_available = False
        self.android_classes_loaded = False
        
    def build(self):
        """Constr√≥i a interface do usu√°rio"""
        Window.clearcolor = (0.95, 0.95, 0.97, 1)  # Fundo claro
        
        self.interface = ModernNFCProInterface(self)
        
        # Agenda inicializa√ß√£o ap√≥s a interface estar pronta
        Clock.schedule_once(self._post_build_init, 0.1)
        
        return self.interface
    
    def _post_build_init(self, dt):
        """Inicializa√ß√£o ap√≥s a constru√ß√£o da interface"""
        logger.info("Iniciando NFC Reader & Writer PRO...")
        
        # Inicializa classes Android se dispon√≠vel
        self.android_classes_loaded = initialize_android_classes()
        
        # Inicializa m√≥dulos PRO
        if self.android_classes_loaded:
            try:
                nfc_writer.initialize()
                automation_engine.initialize()
            except Exception as e:
                logger.warning(f"Erro ao inicializar m√≥dulos PRO: {e}")
            self._check_nfc_availability()
        else:
            self.interface.reader_interface.update_status(
                '‚ö†Ô∏è Ambiente de desenvolvimento detectado',
                'üîß Funcionalidades PRO dispon√≠veis apenas no Android'
            )
    
    def _check_nfc_availability(self):
        """Verifica se o NFC est√° dispon√≠vel e ativo"""
        try:
            if not PythonActivity or not NfcAdapter:
                self.interface.reader_interface.update_status(
                    '‚ö†Ô∏è Classes Android n√£o dispon√≠veis',
                    'üîß Execute no dispositivo Android para funcionalidade completa'
                )
                return
                
            current_activity = PythonActivity.mActivity
            nfc_adapter = NfcAdapter.getDefaultAdapter(current_activity)
            
            if nfc_adapter is None:
                self.interface.reader_interface.update_status(
                    '‚ùå NFC n√£o suportado neste dispositivo',
                    'üì± Este dispositivo n√£o possui hardware NFC'
                )
                return
            
            if not nfc_adapter.isEnabled():
                self.interface.reader_interface.update_status(
                    '‚ö†Ô∏è NFC est√° desativado',
                    '‚öôÔ∏è Ative o NFC nas configura√ß√µes do Android'
                )
                return
            
            self.nfc_available = True
            self.interface.reader_interface.update_status(
                '‚úÖ NFC Reader & Writer PRO ativo!',
                'üîç Leia tags ou ‚úçÔ∏è escreva dados personalizados'
            )
            
            # Verifica se o app foi iniciado por uma tag
            self._check_launch_intent()
            
        except Exception as e:
            logger.error(f"Erro ao verificar NFC: {e}")
            self.interface.reader_interface.update_status(
                f'‚ùå Erro ao verificar NFC: {str(e)}',
                'üîß Verifique as permiss√µes do aplicativo'
            )

    def on_start(self):
        """Chamado quando o aplicativo inicia"""
        logger.info("NFC Reader & Writer PRO iniciado")

    def on_resume(self):
        """Chamado quando o app retorna do background"""
        logger.info("App retomado")
        if self.android_classes_loaded:
            Clock.schedule_once(lambda dt: self._check_launch_intent(), 0.1)

    def _check_launch_intent(self):
        """Verifica se o app foi iniciado por uma intent NFC"""
        if not self.android_classes_loaded:
            return
            
        try:
            current_activity = PythonActivity.mActivity
            intent = current_activity.getIntent()
            if intent:
                self.handle_intent(intent)
        except Exception as e:
            logger.error(f"Erro ao verificar intent de inicializa√ß√£o: {e}")

    def on_new_intent(self, intent):
        """Chamado quando uma nova intent √© recebida (tag aproximada)"""
        logger.info("Nova intent recebida")
        self.handle_intent(intent)

    def handle_intent(self, intent):
        """Processa a intent para extrair dados da tag NFC"""
        if not self.android_classes_loaded or not intent:
            return

        try:
            action = intent.getAction()
            logger.info(f"Intent action: {action}")
            
            if action in [NfcAdapter.ACTION_NDEF_DISCOVERED, 
                         NfcAdapter.ACTION_TECH_DISCOVERED, 
                         NfcAdapter.ACTION_TAG_DISCOVERED]:
                
                self.interface.reader_interface.update_status(
                    'üîç Tag NFC detectada! Processando...',
                    '‚è≥ Decodificando dados da tag'
                )
                
                # Processa dados NDEF se dispon√≠veis
                if action == NfcAdapter.ACTION_NDEF_DISCOVERED:
                    self._process_ndef_data(intent)
                else:
                    self._process_general_tag(intent)
                    
            else:
                self.interface.reader_interface.update_status(
                    f'‚ÑπÔ∏è Intent recebida: {action}',
                    'üëã Aguardando tag NFC...'
                )
                
        except Exception as e:
            error_msg = f"Erro ao processar intent: {str(e)}"
            logger.error(error_msg)
            self.interface.reader_interface.update_status(
                f'‚ùå {error_msg}',
                'üîß Tente aproximar a tag novamente'
            )

    def _process_ndef_data(self, intent):
        """Processa dados NDEF da tag"""
        try:
            raw_msgs = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES)
            
            if not raw_msgs:
                self.interface.reader_interface.update_reading_content(
                    'üìã Tag NDEF detectada\n\n'
                    '‚ö†Ô∏è Nenhuma mensagem NDEF encontrada na tag'
                )
                return
            
            all_content = "üè∑Ô∏è **DADOS DA TAG NFC**\n"
            all_content += f"‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n"
            
            record_count = 0
            
            for msg_index, msg in enumerate(raw_msgs):
                message = msg.cast(NdefMessage)
                records = message.getRecords()
                
                all_content += f"üìÑ **Mensagem {msg_index + 1}** ({len(records)} registros)\n\n"
                
                for record_index, record in enumerate(records):
                    record_count += 1
                    decoded = self.decoder.decode_ndef_record(record)
                    
                    all_content += f"üìå **Registro {record_index + 1}:**\n"
                    all_content += f"   üè∑Ô∏è Tipo: {decoded['type']}\n"
                    all_content += f"   üìù Conte√∫do: {decoded['content']}\n"
                    
                    if 'details' in decoded:
                        all_content += f"   ‚ÑπÔ∏è Detalhes: {decoded['details']}\n"
                    
                    all_content += "\n"
                    
                    # Adiciona ao hist√≥rico
                    self.history_manager.add_reading(
                        decoded['type'],
                        decoded['content'],
                        decoded.get('raw')
                    )
            
            all_content += f"‚úÖ **Processamento conclu√≠do!**\n"
            all_content += f"üìä Total de registros: {record_count}"
            
            self.interface.reader_interface.update_reading_content(all_content)
            self.interface.reader_interface.update_status(
                f'‚úÖ Tag lida com sucesso! ({record_count} registros)',
                'üîç Leia outra tag ou ‚úçÔ∏è escreva novos dados'
            )
            
        except Exception as e:
            error_msg = f"Erro ao processar dados NDEF: {str(e)}"
            logger.error(error_msg)
            self.interface.reader_interface.update_reading_content(
                f'‚ùå {error_msg}\n\n'
                'üîß Tente aproximar a tag novamente ou verifique se a tag est√° funcionando.'
            )

    def _process_general_tag(self, intent):
        """Processa tag geral (sem dados NDEF)"""
        try:
            # Tenta obter informa√ß√µes b√°sicas da tag
            tag_info = "üè∑Ô∏è **TAG NFC DETECTADA**\n"
            tag_info += f"‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n"
            tag_info += "üìã **Informa√ß√µes:**\n"
            tag_info += "   üî∏ Tipo: Tag sem dados NDEF\n"
            tag_info += "   üî∏ Status: Tag detectada mas sem conte√∫do leg√≠vel\n\n"
            tag_info += "üí° **Sugest√µes:**\n"
            tag_info += "   ‚Ä¢ Use a aba ‚úçÔ∏è Escrever para programar a tag\n"
            tag_info += "   ‚Ä¢ Crie perfis personalizados na aba üë§ Perfis\n"
            tag_info += "   ‚Ä¢ Configure automa√ß√µes na aba ü§ñ Auto\n\n"
            tag_info += "üîß **Dica PRO:**\n"
            tag_info += "   Esta tag vazia √© perfeita para seus dados customizados!"
            
            self.interface.reader_interface.update_reading_content(tag_info)
            self.interface.reader_interface.update_status(
                '‚ö†Ô∏è Tag vazia detectada - Pronta para escrita!',
                '‚úçÔ∏è Use a aba Escrever para programar esta tag'
            )
            
            # Adiciona ao hist√≥rico
            self.history_manager.add_reading(
                "Tag Vazia",
                "Tag detectada sem dados NDEF - Pronta para programa√ß√£o",
                None
            )
            
        except Exception as e:
            logger.error(f"Erro ao processar tag geral: {e}")

    def show_popup(self, title, message):
        """Mostra popup simples"""
        content = Label(text=message, halign='center', valign='middle')
        popup = Popup(title=title, content=content, size_hint=(0.8, 0.6))
        popup.open()
    
    def show_history_popup(self):
        """Mostra popup com hist√≥rico de leituras"""
        history = self.history_manager.get_history()
        
        if not history:
            content = Label(
                text='üìã Nenhuma leitura no hist√≥rico ainda.\n\n'
                     'üëã Aproxime uma tag NFC para come√ßar!',
                halign='center',
                valign='middle'
            )
        else:
            history_text = "üìö **HIST√ìRICO DE LEITURAS**\n\n"
            
            for i, reading in enumerate(history[:10]):  # Mostra √∫ltimas 10
                history_text += f"üìå **#{i+1}** - {reading['timestamp']}\n"
                history_text += f"   üè∑Ô∏è {reading['type']}\n"
                history_text += f"   üìù {reading['content'][:50]}{'...' if len(reading['content']) > 50 else ''}\n\n"
            
            if len(history) > 10:
                history_text += f"... e mais {len(history) - 10} leituras"
            
            content = ScrollView()
            label = Label(
                text=history_text,
                text_size=(dp(300), None),
                halign='left',
                valign='top',
                markup=True
            )
            content.add_widget(label)
        
        popup = Popup(
            title='üìö Hist√≥rico de Leituras NFC',
            content=content,
            size_hint=(0.9, 0.8)
        )
        popup.open()

    def clear_history(self):
        """Limpa o hist√≥rico de leituras"""
        self.history_manager.clear_history()
        logger.info("Hist√≥rico limpo pelo usu√°rio")
    
    def show_debug_popup(self):
        """Mostra informa√ß√µes de debug"""
        debug_info = f"""üîß **INFORMA√á√ïES DE DEBUG**

üñ•Ô∏è **Sistema:**
   ‚Ä¢ Plataforma: {platform}
   ‚Ä¢ Classes Android: {'‚úÖ' if self.android_classes_loaded else '‚ùå'}
   ‚Ä¢ NFC Dispon√≠vel: {'‚úÖ' if self.nfc_available else '‚ùå'}

üìä **Estat√≠sticas:**
   ‚Ä¢ Leituras no hist√≥rico: {len(self.history_manager.get_history())}
   ‚Ä¢ M√°ximo do hist√≥rico: {self.history_manager.max_history}

‚öôÔ∏è **M√≥dulos:**
   ‚Ä¢ NFC Writer: Carregado
   ‚Ä¢ Profile Manager: Carregado  
   ‚Ä¢ Automation Engine: Carregado

üîç **Status:**
   ‚Ä¢ App inicializado: ‚úÖ
   ‚Ä¢ Interface criada: ‚úÖ
   ‚Ä¢ Decoder ativo: ‚úÖ
"""
        
        content = ScrollView()
        label = Label(
            text=debug_info,
            text_size=(dp(350), None),
            halign='left',
            valign='top',
            markup=True
        )
        content.add_widget(label)
        
        popup = Popup(
            title='üîß Debug - NFC Reader PRO',
            content=content,
            size_hint=(0.9, 0.8)
        )
        popup.open()
    
    def run_test_simulation(self):
        """Executa uma simula√ß√£o de teste"""
        # Simula uma leitura NFC
        test_content = "üß™ **SIMULA√á√ÉO DE TESTE**\n"
        test_content += f"‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n"
        test_content += "üìÑ **Tag de Teste Simulada**\n\n"
        test_content += "üìå **Registro 1:**\n"
        test_content += "   üè∑Ô∏è Tipo: Texto\n"
        test_content += "   üìù Conte√∫do: Hello World - NFC Test!\n"
        test_content += "   ‚ÑπÔ∏è Detalhes: Idioma: pt, Encoding: utf-8\n\n"
        test_content += "‚úÖ **Teste conclu√≠do!**\n"
        test_content += "üìä Total de registros: 1"
        
        self.interface.reader_interface.update_reading_content(test_content)
        self.interface.reader_interface.update_status(
            'üß™ Teste executado com sucesso!',
            '‚úÖ Simula√ß√£o de leitura NFC conclu√≠da'
        )
        
        # Adiciona ao hist√≥rico
        self.history_manager.add_reading(
            "Teste",
            "Hello World - NFC Test!",
            "simulacao_teste"
        )
    
    def show_info_popup(self):
        """Mostra informa√ß√µes do aplicativo"""
        info_text = """üîç **NFC Reader & Writer PRO v2.0**

‚ú® **Caracter√≠sticas:**
‚Ä¢ Leitura avan√ßada de tags NFC
‚Ä¢ Escrita personalizada de dados
‚Ä¢ Sistema de perfis e automa√ß√£o
‚Ä¢ Interface moderna e intuitiva
‚Ä¢ Hist√≥rico completo de leituras
‚Ä¢ Suporte a m√∫ltiplos formatos NDEF

üõ†Ô∏è **Desenvolvimento:**
‚Ä¢ Framework: Kivy
‚Ä¢ Linguagem: Python
‚Ä¢ Plataforma: Android
‚Ä¢ Arquitetura: Modular

üì± **Recursos PRO:**
‚Ä¢ Decodifica√ß√£o de m√∫ltiplos tipos
‚Ä¢ Sistema de automa√ß√£o
‚Ä¢ Integra√ß√£o com sistema Android
‚Ä¢ Exporta√ß√£o e importa√ß√£o de dados

üí° **Vers√£o 2.0 - Melhorias:**
‚Ä¢ Interface com abas
‚Ä¢ Funcionalidades de escrita
‚Ä¢ Sistema de perfis
‚Ä¢ Comandos de automa√ß√£o
"""
        
        content = ScrollView()
        label = Label(
            text=info_text,
            text_size=(dp(350), None),
            halign='left',
            valign='top',
            markup=True
        )
        content.add_widget(label)
        
        popup = Popup(
            title='‚ÑπÔ∏è Sobre o App',
            content=content,
            size_hint=(0.9, 0.8)
        )
        popup.open()


# Fun√ß√£o principal para executar o app
def main():
    """Fun√ß√£o principal"""
    try:
        NfcReaderWriterProApp().run()
    except Exception as e:
        print(f"Erro ao executar o aplicativo: {e}")
        logger.error(f"Erro cr√≠tico: {e}")


if __name__ == '__main__':
    main()
