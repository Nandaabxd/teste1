"""
ü§ñ NFC Automation Module - Sistema de Automa√ß√£o e Comandos
=========================================================

M√≥dulo para automa√ß√£o avan√ßada, integra√ß√£o com Tasker e execu√ß√£o
de comandos do sistema atrav√©s de tags NFC.
"""

import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional, Callable
from enum import Enum

logger = logging.getLogger(__name__)


class SystemCommand(Enum):
    """Comandos do sistema suportados"""
    WIFI_TOGGLE = "wifi_toggle"
    WIFI_ON = "wifi_on"
    WIFI_OFF = "wifi_off"
    BLUETOOTH_TOGGLE = "bluetooth_toggle"
    BLUETOOTH_ON = "bluetooth_on"
    BLUETOOTH_OFF = "bluetooth_off"
    VOLUME_UP = "volume_up"
    VOLUME_DOWN = "volume_down"
    VOLUME_MUTE = "volume_mute"
    VOLUME_SET = "volume_set"
    BRIGHTNESS_UP = "brightness_up"
    BRIGHTNESS_DOWN = "brightness_down"
    BRIGHTNESS_SET = "brightness_set"
    FLASHLIGHT_TOGGLE = "flashlight_toggle"
    FLASHLIGHT_ON = "flashlight_on"
    FLASHLIGHT_OFF = "flashlight_off"
    AIRPLANE_MODE_TOGGLE = "airplane_mode_toggle"
    LOCATION_TOGGLE = "location_toggle"
    HOTSPOT_TOGGLE = "hotspot_toggle"
    DONOTDISTURB_TOGGLE = "dnd_toggle"
    SCREEN_TIMEOUT_SET = "screen_timeout_set"
    AUTO_ROTATE_TOGGLE = "auto_rotate_toggle"
    LAUNCH_APP = "launch_app"
    OPEN_URL = "open_url"
    SEND_NOTIFICATION = "send_notification"
    TAKE_PHOTO = "take_photo"
    RECORD_AUDIO = "record_audio"
    SET_ALARM = "set_alarm"
    SET_TIMER = "set_timer"
    PLAY_MUSIC = "play_music"
    PAUSE_MUSIC = "pause_music"
    NEXT_TRACK = "next_track"
    PREVIOUS_TRACK = "previous_track"


class TaskAction:
    """A√ß√£o de tarefa automatizada"""
    
    def __init__(self, action_type: str, parameters: Dict[str, Any]):
        self.action_type = action_type
        self.parameters = parameters
        self.condition = None
        self.delay_seconds = 0
        self.repeat_count = 1
        self.enabled = True
        self.created_at = datetime.now()
        
    def set_condition(self, condition_func: Callable[[], bool]):
        """Define condi√ß√£o para execu√ß√£o"""
        self.condition = condition_func
        
    def set_delay(self, seconds: int):
        """Define delay antes da execu√ß√£o"""
        self.delay_seconds = seconds
        
    def set_repeat(self, count: int):
        """Define n√∫mero de repeti√ß√µes"""
        self.repeat_count = max(1, count)
        
    def can_execute(self) -> bool:
        """Verifica se a a√ß√£o pode ser executada"""
        if not self.enabled:
            return False
        
        if self.condition and not self.condition():
            return False
            
        return True
        
    def to_dict(self) -> Dict[str, Any]:
        """Converte para dicion√°rio"""
        return {
            'action_type': self.action_type,
            'parameters': self.parameters,
            'delay_seconds': self.delay_seconds,
            'repeat_count': self.repeat_count,
            'enabled': self.enabled,
            'created_at': self.created_at.isoformat()
        }
        
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TaskAction':
        """Cria a partir de dicion√°rio"""
        action = cls(data['action_type'], data['parameters'])
        action.delay_seconds = data.get('delay_seconds', 0)
        action.repeat_count = data.get('repeat_count', 1)
        action.enabled = data.get('enabled', True)
        action.created_at = datetime.fromisoformat(data['created_at'])
        return action


class AutomationTask:
    """Tarefa de automa√ß√£o completa"""
    
    def __init__(self, name: str, description: str = ""):
        self.name = name
        self.description = description
        self.actions = []
        self.triggers = []
        self.enabled = True
        self.execution_count = 0
        self.last_execution = None
        self.created_at = datetime.now()
        
    def add_action(self, action: TaskAction):
        """Adiciona a√ß√£o √† tarefa"""
        self.actions.append(action)
        
    def add_trigger(self, trigger_type: str, trigger_data: Dict[str, Any]):
        """Adiciona gatilho √† tarefa"""
        trigger = {
            'type': trigger_type,
            'data': trigger_data,
            'created_at': datetime.now().isoformat()
        }
        self.triggers.append(trigger)
        
    def execute(self) -> bool:
        """Executa a tarefa"""
        if not self.enabled:
            return False
            
        try:
            success_count = 0
            
            for action in self.actions:
                if action.can_execute():
                    # Executa a√ß√£o (implementa√ß√£o espec√≠fica)
                    if self._execute_action(action):
                        success_count += 1
                    
            self.execution_count += 1
            self.last_execution = datetime.now()
            
            logger.info(f"Tarefa '{self.name}' executada: {success_count}/{len(self.actions)} a√ß√µes")
            return success_count > 0
            
        except Exception as e:
            logger.error(f"Erro ao executar tarefa '{self.name}': {e}")
            return False
            
    def _execute_action(self, action: TaskAction) -> bool:
        """Executa uma a√ß√£o espec√≠fica"""
        # Implementa√ß√£o ser√° feita no SystemController
        return True
        
    def to_dict(self) -> Dict[str, Any]:
        """Converte para dicion√°rio"""
        return {
            'name': self.name,
            'description': self.description,
            'actions': [action.to_dict() for action in self.actions],
            'triggers': self.triggers,
            'enabled': self.enabled,
            'execution_count': self.execution_count,
            'last_execution': self.last_execution.isoformat() if self.last_execution else None,
            'created_at': self.created_at.isoformat()
        }
        
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'AutomationTask':
        """Cria a partir de dicion√°rio"""
        task = cls(data['name'], data.get('description', ''))
        task.actions = [TaskAction.from_dict(action_data) for action_data in data.get('actions', [])]
        task.triggers = data.get('triggers', [])
        task.enabled = data.get('enabled', True)
        task.execution_count = data.get('execution_count', 0)
        
        if data.get('last_execution'):
            task.last_execution = datetime.fromisoformat(data['last_execution'])
            
        task.created_at = datetime.fromisoformat(data['created_at'])
        return task


class SystemController:
    """Controlador para comandos do sistema Android"""
    
    def __init__(self):
        self.android_classes_loaded = False
        self.context = None
        self.audio_manager = None
        self.wifi_manager = None
        self.bluetooth_adapter = None
        self.notification_manager = None
        
    def initialize(self) -> bool:
        """Inicializa controlador do sistema"""
        try:
            from jnius import autoclass
            
            # Classes Android para controle do sistema
            self.PythonActivity = autoclass('org.kivy.android.PythonActivity')
            self.Context = autoclass('android.content.Context')
            self.AudioManager = autoclass('android.media.AudioManager')
            self.WifiManager = autoclass('android.net.wifi.WifiManager')
            self.BluetoothAdapter = autoclass('android.bluetooth.BluetoothAdapter')
            self.NotificationManager = autoclass('android.app.NotificationManager')
            self.Intent = autoclass('android.content.Intent')
            self.Settings = autoclass('android.provider.Settings')
            
            # Obt√©m contexto da atividade
            self.context = self.PythonActivity.mActivity
            
            # Inicializa gerenciadores
            self.audio_manager = self.context.getSystemService(self.Context.AUDIO_SERVICE)
            self.wifi_manager = self.context.getSystemService(self.Context.WIFI_SERVICE)
            self.bluetooth_adapter = self.BluetoothAdapter.getDefaultAdapter()
            self.notification_manager = self.context.getSystemService(self.Context.NOTIFICATION_SERVICE)
            
            self.android_classes_loaded = True
            logger.info("SystemController inicializado com sucesso")
            return True
            
        except ImportError:
            logger.error("PyJNIUS n√£o dispon√≠vel para controle do sistema")
            return False
        except Exception as e:
            logger.error(f"Erro ao inicializar SystemController: {e}")
            return False
    
    def execute_command(self, command: SystemCommand, parameters: Dict[str, Any] = None) -> bool:
        """Executa comando do sistema"""
        if not self.android_classes_loaded:
            logger.error("SystemController n√£o inicializado")
            return False
            
        parameters = parameters or {}
        
        try:
            if command == SystemCommand.WIFI_TOGGLE:
                return self._toggle_wifi()
            elif command == SystemCommand.WIFI_ON:
                return self._set_wifi(True)
            elif command == SystemCommand.WIFI_OFF:
                return self._set_wifi(False)
            elif command == SystemCommand.BLUETOOTH_TOGGLE:
                return self._toggle_bluetooth()
            elif command == SystemCommand.BLUETOOTH_ON:
                return self._set_bluetooth(True)
            elif command == SystemCommand.BLUETOOTH_OFF:
                return self._set_bluetooth(False)
            elif command == SystemCommand.VOLUME_UP:
                return self._adjust_volume(1)
            elif command == SystemCommand.VOLUME_DOWN:
                return self._adjust_volume(-1)
            elif command == SystemCommand.VOLUME_MUTE:
                return self._mute_volume()
            elif command == SystemCommand.VOLUME_SET:
                volume = parameters.get('volume', 50)
                return self._set_volume(volume)
            elif command == SystemCommand.LAUNCH_APP:
                package_name = parameters.get('package_name', '')
                return self._launch_app(package_name)
            elif command == SystemCommand.OPEN_URL:
                url = parameters.get('url', '')
                return self._open_url(url)
            elif command == SystemCommand.SEND_NOTIFICATION:
                title = parameters.get('title', 'NFC Action')
                message = parameters.get('message', 'Action executed')
                return self._send_notification(title, message)
            else:
                logger.warning(f"Comando n√£o implementado: {command}")
                return False
                
        except Exception as e:
            logger.error(f"Erro ao executar comando {command}: {e}")
            return False
    
    def _toggle_wifi(self) -> bool:
        """Toggle Wi-Fi"""
        try:
            current_state = self.wifi_manager.isWifiEnabled()
            self.wifi_manager.setWifiEnabled(not current_state)
            return True
        except Exception as e:
            logger.error(f"Erro ao alternar Wi-Fi: {e}")
            return False
    
    def _set_wifi(self, enabled: bool) -> bool:
        """Liga/desliga Wi-Fi"""
        try:
            self.wifi_manager.setWifiEnabled(enabled)
            return True
        except Exception as e:
            logger.error(f"Erro ao definir Wi-Fi: {e}")
            return False
    
    def _toggle_bluetooth(self) -> bool:
        """Toggle Bluetooth"""
        try:
            if self.bluetooth_adapter.isEnabled():
                self.bluetooth_adapter.disable()
            else:
                self.bluetooth_adapter.enable()
            return True
        except Exception as e:
            logger.error(f"Erro ao alternar Bluetooth: {e}")
            return False
    
    def _set_bluetooth(self, enabled: bool) -> bool:
        """Liga/desliga Bluetooth"""
        try:
            if enabled:
                self.bluetooth_adapter.enable()
            else:
                self.bluetooth_adapter.disable()
            return True
        except Exception as e:
            logger.error(f"Erro ao definir Bluetooth: {e}")
            return False
    
    def _adjust_volume(self, direction: int) -> bool:
        """Ajusta volume (1 para cima, -1 para baixo)"""
        try:
            if direction > 0:
                self.audio_manager.adjustStreamVolume(
                    self.AudioManager.STREAM_MUSIC,
                    self.AudioManager.ADJUST_RAISE,
                    self.AudioManager.FLAG_SHOW_UI
                )
            else:
                self.audio_manager.adjustStreamVolume(
                    self.AudioManager.STREAM_MUSIC,
                    self.AudioManager.ADJUST_LOWER,
                    self.AudioManager.FLAG_SHOW_UI
                )
            return True
        except Exception as e:
            logger.error(f"Erro ao ajustar volume: {e}")
            return False
    
    def _mute_volume(self) -> bool:
        """Muta/desmuta volume"""
        try:
            self.audio_manager.adjustStreamVolume(
                self.AudioManager.STREAM_MUSIC,
                self.AudioManager.ADJUST_TOGGLE_MUTE,
                self.AudioManager.FLAG_SHOW_UI
            )
            return True
        except Exception as e:
            logger.error(f"Erro ao mutar volume: {e}")
            return False
    
    def _set_volume(self, volume: int) -> bool:
        """Define volume espec√≠fico (0-100)"""
        try:
            max_volume = self.audio_manager.getStreamMaxVolume(self.AudioManager.STREAM_MUSIC)
            target_volume = int((volume / 100.0) * max_volume)
            
            self.audio_manager.setStreamVolume(
                self.AudioManager.STREAM_MUSIC,
                target_volume,
                self.AudioManager.FLAG_SHOW_UI
            )
            return True
        except Exception as e:
            logger.error(f"Erro ao definir volume: {e}")
            return False
    
    def _launch_app(self, package_name: str) -> bool:
        """Lan√ßa aplicativo"""
        try:
            intent = self.context.getPackageManager().getLaunchIntentForPackage(package_name)
            if intent:
                self.context.startActivity(intent)
                return True
            return False
        except Exception as e:
            logger.error(f"Erro ao lan√ßar app {package_name}: {e}")
            return False
    
    def _open_url(self, url: str) -> bool:
        """Abre URL no navegador"""
        try:
            intent = self.Intent(self.Intent.ACTION_VIEW)
            intent.setData(self.Uri.parse(url))
            self.context.startActivity(intent)
            return True
        except Exception as e:
            logger.error(f"Erro ao abrir URL {url}: {e}")
            return False
    
    def _send_notification(self, title: str, message: str) -> bool:
        """Envia notifica√ß√£o"""
        try:
            # Implementa√ß√£o simplificada - requer API espec√≠fica do Android
            logger.info(f"Notifica√ß√£o: {title} - {message}")
            return True
        except Exception as e:
            logger.error(f"Erro ao enviar notifica√ß√£o: {e}")
            return False


class TaskerIntegration:
    """Integra√ß√£o com Tasker para automa√ß√£o avan√ßada"""
    
    def __init__(self):
        self.tasker_available = False
        
    def check_tasker_availability(self) -> bool:
        """Verifica se Tasker est√° dispon√≠vel"""
        try:
            # Verifica se o Tasker est√° instalado
            # Implementa√ß√£o espec√≠fica seria necess√°ria
            self.tasker_available = True  # Simulado
            return True
        except Exception:
            return False
    
    def execute_tasker_task(self, task_name: str, variables: Dict[str, str] = None) -> bool:
        """Executa tarefa do Tasker"""
        if not self.tasker_available:
            return False
        
        try:
            # Implementa√ß√£o para chamar tarefa do Tasker
            logger.info(f"Executando tarefa Tasker: {task_name}")
            return True
        except Exception as e:
            logger.error(f"Erro ao executar tarefa Tasker: {e}")
            return False
    
    def create_tasker_profile(self, profile_name: str, conditions: Dict[str, Any], actions: List[Dict[str, Any]]) -> bool:
        """Cria perfil no Tasker"""
        try:
            # Implementa√ß√£o para criar perfil no Tasker
            logger.info(f"Criando perfil Tasker: {profile_name}")
            return True
        except Exception as e:
            logger.error(f"Erro ao criar perfil Tasker: {e}")
            return False


class BatchTaskManager:
    """Gerenciador de tarefas em lote"""
    
    def __init__(self):
        self.batch_tasks = {}
        
    def create_batch_task(self, name: str, tasks: List[AutomationTask]) -> bool:
        """Cria tarefa em lote"""
        self.batch_tasks[name] = {
            'tasks': tasks,
            'created_at': datetime.now(),
            'execution_count': 0,
            'enabled': True
        }
        return True
    
    def execute_batch_task(self, name: str) -> bool:
        """Executa tarefa em lote"""
        if name not in self.batch_tasks:
            return False
        
        batch = self.batch_tasks[name]
        if not batch['enabled']:
            return False
        
        try:
            success_count = 0
            total_tasks = len(batch['tasks'])
            
            for task in batch['tasks']:
                if task.execute():
                    success_count += 1
            
            batch['execution_count'] += 1
            
            logger.info(f"Lote '{name}' executado: {success_count}/{total_tasks} tarefas")
            return success_count > 0
            
        except Exception as e:
            logger.error(f"Erro ao executar lote '{name}': {e}")
            return False
    
    def list_batch_tasks(self) -> List[str]:
        """Lista tarefas em lote"""
        return list(self.batch_tasks.keys())


class AutomationEngine:
    """Motor principal de automa√ß√£o"""
    
    def __init__(self):
        self.system_controller = SystemController()
        self.tasker_integration = TaskerIntegration()
        self.batch_manager = BatchTaskManager()
        self.automation_tasks = {}
        self.execution_history = []
        
    def initialize(self) -> bool:
        """Inicializa motor de automa√ß√£o"""
        system_init = self.system_controller.initialize()
        tasker_init = self.tasker_integration.check_tasker_availability()
        
        logger.info(f"AutomationEngine - Sistema: {system_init}, Tasker: {tasker_init}")
        return system_init  # Tasker √© opcional
    
    def register_task(self, task: AutomationTask):
        """Registra tarefa de automa√ß√£o"""
        self.automation_tasks[task.name] = task
        
    def execute_task(self, task_name: str) -> bool:
        """Executa tarefa espec√≠fica"""
        if task_name not in self.automation_tasks:
            return False
        
        task = self.automation_tasks[task_name]
        success = task.execute()
        
        # Registra no hist√≥rico
        self.execution_history.append({
            'timestamp': datetime.now().isoformat(),
            'task_name': task_name,
            'success': success,
            'action_count': len(task.actions)
        })
        
        return success
    
    def get_execution_history(self) -> List[Dict[str, Any]]:
        """Retorna hist√≥rico de execu√ß√µes"""
        return self.execution_history.copy()


# Inst√¢ncias globais
automation_engine = AutomationEngine()
system_controller = SystemController()
tasker_integration = TaskerIntegration()
batch_manager = BatchTaskManager()
