name: üöÄ Build NFC Writer PRO2 APK
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite execu√ß√£o manual

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: ‚òï Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üì¶ Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: üîß Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          openjdk-17-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          ccache \
          unzip \
          zip
          
    - name: üì± Install Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        ndk-version: '25.2.9519653'
        
    - name: üîê Accept Android SDK Licenses
      run: |
        echo "üîê Aceitando licen√ßas do Android SDK..."
        
        # Criar diret√≥rio de licen√ßas se n√£o existir
        mkdir -p $ANDROID_SDK_ROOT/licenses
        
        # Aceitar todas as licen√ßas automaticamente (incluindo build-tools 36)
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_SDK_ROOT/licenses/intel-android-extra-license
        echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > $ANDROID_SDK_ROOT/licenses/google-gdk-license
        echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" > $ANDROID_SDK_ROOT/licenses/google-gdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        
        # Licen√ßas para build-tools 36 e outras vers√µes
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_SDK_ROOT/licenses/intel-android-extra-license
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        
        # Aceitar automaticamente usando yes
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # Verificar se as licen√ßas foram aceitas
        ls -la $ANDROID_SDK_ROOT/licenses/
        
        echo "‚úÖ Licen√ßas aceitas automaticamente!"
        
    - name: üõ†Ô∏è Install Required Build Tools
      run: |
        echo "üõ†Ô∏è Instalando build-tools necess√°rias..."
        
        # Aceitar licen√ßas primeiro
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        
        # Listar o que est√° dispon√≠vel
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list | grep build-tools
        
        # Instalar m√∫ltiplas vers√µes de build-tools para garantir compatibilidade
        echo "üì¶ Instalando build-tools vers√£o 33..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.0"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.1"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2"
        
        echo "üì¶ Instalando build-tools vers√£o 34..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0" || true
        
        echo "üì¶ Tentando instalar build-tools vers√£o 36..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;36.0.0" || echo "‚ö†Ô∏è Build-tools 36 n√£o dispon√≠vel, usando vers√£o 33"
        
        # Verificar o que foi instalado
        echo "üîç Build-tools instaladas:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "‚ùå Diret√≥rio build-tools n√£o encontrado"
        
        # Procurar por AIDL em todas as vers√µes instaladas
        echo "üîç Procurando por AIDL:"
        find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null || echo "‚ùå AIDL n√£o encontrado"
        
        # Encontrar a vers√£o mais recente das build-tools instaladas
        LATEST_BUILD_TOOLS=$(ls $ANDROID_SDK_ROOT/build-tools/ | sort -V | tail -1)
        echo "üéØ Usando build-tools: $LATEST_BUILD_TOOLS"
        
        # Adicionar build-tools ao PATH (usar a vers√£o mais recente dispon√≠vel)
        if [ -d "$ANDROID_SDK_ROOT/build-tools/$LATEST_BUILD_TOOLS" ]; then
          echo "PATH=$ANDROID_SDK_ROOT/build-tools/$LATEST_BUILD_TOOLS:\$PATH" >> $GITHUB_ENV
          echo "‚úÖ Build-tools $LATEST_BUILD_TOOLS adicionadas ao PATH"
        else
          echo "‚ùå Erro: build-tools n√£o encontradas"
          exit 1
        fi
        
        echo "‚úÖ Build-tools configuradas com sucesso!"
        
    - name: üîß Verify and Fix AIDL
      run: |
        echo "üîç Verificando AIDL..."
        
        # Procurar AIDL em todo o Android SDK
        AIDL_PATH=$(find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null | head -1)
        
        if [ -n "$AIDL_PATH" ]; then
          echo "‚úÖ AIDL encontrado: $AIDL_PATH"
          
          # Verificar se o AIDL √© execut√°vel
          if [ -x "$AIDL_PATH" ]; then
            echo "‚úÖ AIDL √© execut√°vel"
            $AIDL_PATH --help || echo "AIDL funciona mas sem --help"
          else
            echo "‚ö†Ô∏è AIDL n√£o √© execut√°vel, corrigindo..."
            chmod +x "$AIDL_PATH"
          fi
          
          # Adicionar diret√≥rio do AIDL ao PATH
          AIDL_DIR=$(dirname "$AIDL_PATH")
          echo "PATH=$AIDL_DIR:\$PATH" >> $GITHUB_ENV
          echo "‚úÖ AIDL adicionado ao PATH: $AIDL_DIR"
          
        else
          echo "‚ùå AIDL n√£o encontrado!"
          echo "üîç Listando conte√∫do das build-tools:"
          find $ANDROID_SDK_ROOT/build-tools -type f -name "*aidl*" 2>/dev/null || echo "Nenhum arquivo aidl encontrado"
          
          echo "üì¶ Tentando instalar platform-tools que cont√©m AIDL..."
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools"
          
          # Procurar novamente
          AIDL_PATH=$(find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null | head -1)
          if [ -n "$AIDL_PATH" ]; then
            echo "‚úÖ AIDL encontrado ap√≥s instalar platform-tools: $AIDL_PATH"
            chmod +x "$AIDL_PATH"
            AIDL_DIR=$(dirname "$AIDL_PATH")
            echo "PATH=$AIDL_DIR:\$PATH" >> $GITHUB_ENV
          else
            echo "‚ùå AIDL ainda n√£o encontrado mesmo ap√≥s instalar platform-tools"
            echo "üîç Estrutura do SDK:"
            ls -la $ANDROID_SDK_ROOT/
            echo "üîç Conte√∫do de build-tools:"
            ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "build-tools n√£o existe"
            echo "üîç Conte√∫do de platform-tools:"
            ls -la $ANDROID_SDK_ROOT/platform-tools/ || echo "platform-tools n√£o existe"
          fi
        fi
        
    - name: üõ†Ô∏è Install Buildozer
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install buildozer==1.5.0
        pip install cython==0.29.33
        pip install colorama
        pip install appdirs
        pip install sh
        pip install pexpect
        
    - name: üîß Fix Buildozer Issues
      run: |
        # Corrigir problemas comuns do buildozer
        echo "üîß Aplicando corre√ß√µes..."
        
        # Verificar se buildozer.spec existe
        if [ ! -f "buildozer.spec" ]; then
          echo "‚ùå buildozer.spec n√£o encontrado!"
          exit 1
        fi
        
        # Instalar depend√™ncias adicionais que podem estar faltando
        sudo apt-get install -y \
          libc6-dev \
          libffi-dev \
          libssl-dev \
          python3-distutils \
          python3-venv || true
        
        # Criar diret√≥rios necess√°rios
        mkdir -p ~/.buildozer/cache
        mkdir -p ~/.local/share/python-for-android
        
        # Configurar git (necess√°rio para algumas depend√™ncias)
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # Limpar cache se necess√°rio
        buildozer android clean || true
        
    - name: üìã Show Build Info
      run: |
        echo "üîç Environment Info:"
        echo "Python: $(python --version)"
        echo "Java: $(java -version)"
        echo "Buildozer: $(buildozer version)"
        echo "NDK: $ANDROID_NDK_ROOT"
        echo "SDK: $ANDROID_SDK_ROOT"
        
    - name: üîß Configure Buildozer
      run: |
        # Criar diret√≥rio .buildozer se n√£o existir
        mkdir -p ~/.buildozer
        
        # Configurar vari√°veis de ambiente
        export ANDROIDSDK="$ANDROID_SDK_ROOT"
        export ANDROIDNDK="$ANDROID_NDK_ROOT"
        export ANDROIDAPI="33"
        export ANDROIDMINAPI="21"
        
        echo "SDK Path: $ANDROIDSDK"
        echo "NDK Path: $ANDROIDNDK"
        
        # Verificar e ajustar buildozer.spec para usar build-tools corretas
        if [ -f "buildozer.spec" ]; then
          echo "üîß Ajustando buildozer.spec..."
          
          # For√ßar uso de build-tools 33 se estiver configurado para 36
          sed -i 's/android.gradle_dependencies = .*/android.gradle_dependencies = /g' buildozer.spec || true
          sed -i 's/android.build_tools = .*/android.build_tools = 33.0.2/g' buildozer.spec || true
          
          # Adicionar configura√ß√£o de build-tools se n√£o existir
          if ! grep -q "android.build_tools" buildozer.spec; then
            echo "android.build_tools = 33.0.2" >> buildozer.spec
          fi
          
          echo "‚úÖ buildozer.spec ajustado para usar build-tools 33.0.2"
        fi
        
        # For√ßar instala√ß√£o de depend√™ncias que podem faltar
        pip install --upgrade cython==0.29.33
        pip install --upgrade pyjnius
        
    - name: üîç Pre-Build Diagnostics
      run: |
        echo "üîç Diagn√≥stico pr√©-build:"
        echo "Working directory: $(pwd)"
        echo "Files present:"
        ls -la
        echo ""
        echo "üîß buildozer.spec content (first 40 lines):"
        head -40 buildozer.spec
        echo ""
        echo "üêç Python packages installed:"
        pip list | grep -E "(buildozer|cython|pyjnius|kivy)"
        echo ""
        echo "üåç Environment variables:"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "PATH: $PATH"
        echo ""
        echo "üì± Android SDK structure:"
        ls -la $ANDROID_SDK_ROOT/ || echo "SDK root n√£o encontrado"
        echo ""
        echo "üõ†Ô∏è Build-tools dispon√≠veis:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "Build-tools n√£o encontrado"
        echo ""
        echo "üîç AIDL verification:"
        which aidl || echo "AIDL n√£o est√° no PATH"
        find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null || echo "AIDL n√£o encontrado no SDK"
        echo ""
        echo "üìã Buildozer version and config:"
        buildozer version
        buildozer android debug --verbose --dry-run 2>&1 | head -20 || echo "Erro no dry-run"
        
    - name: üèóÔ∏è Build APK
      run: |
        echo "üöÄ Iniciando compila√ß√£o do APK..."
        echo "üì± App: NFC Writer PRO2 v2.0"
        echo "üéØ Target: Android API 33"
        echo "üìê Arch: ARM 32/64-bit"
        
        # Debug info antes do build
        echo "üîç Debug info:"
        ls -la
        cat buildozer.spec | head -20
        
        # Compilar APK com debug verbose
        buildozer android debug --verbose
        
    - name: üì± Verify APK
      run: |
        echo "üîç Verificando APK gerado..."
        ls -la bin/ || echo "‚ùå Diret√≥rio bin/ n√£o existe"
        
        # Verificar se algum APK foi gerado
        find . -name "*.apk" -type f || echo "‚ùå Nenhum APK encontrado"
        
        if [ -d "bin" ] && [ -n "$(ls -A bin/*.apk 2>/dev/null)" ]; then
          echo "‚úÖ APK gerado com sucesso!"
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "üì± Arquivo: $APK_FILE"
          echo "üìä Tamanho: $(du -h $APK_FILE | cut -f1)"
          
          # Verificar estrutura do APK
          file $APK_FILE
        else
          echo "‚ùå APK n√£o foi gerado!"
          echo "üîç Verificando logs de erro..."
          if [ -f ".buildozer/logs/buildozer.log" ]; then
            echo "üìã √öltimas linhas do log:"
            tail -50 .buildozer/logs/buildozer.log
          fi
          exit 1
        fi
        
    - name: üì§ Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nfc-writer-pro2-apk
        path: bin/*.apk
        retention-days: 30
        
    - name: üìã Create Release Notes
      if: success()
      run: |
        echo "üéâ **NFC Writer PRO2 v2.0 - APK Gerado com Sucesso!**" > release_notes.md
        echo "" >> release_notes.md
        echo "### üì± **Informa√ß√µes do APK:**" >> release_notes.md
        echo "- **App**: NFC Writer PRO2" >> release_notes.md
        echo "- **Vers√£o**: 2.0" >> release_notes.md
        echo "- **Android Min**: API 21 (Android 5.0)" >> release_notes.md
        echo "- **Android Target**: API 33 (Android 13)" >> release_notes.md
        echo "- **Arquitetura**: ARM 32/64-bit" >> release_notes.md
        echo "" >> release_notes.md
        echo "### üîç **Funcionalidades:**" >> release_notes.md
        echo "- ‚úÖ Leitura de tags NFC" >> release_notes.md
        echo "- ‚úÖ Escrita de tags NFC (10 tipos)" >> release_notes.md
        echo "- ‚úÖ Interface moderna e intuitiva" >> release_notes.md
        echo "- ‚úÖ Hist√≥rico de leituras" >> release_notes.md
        echo "- ‚úÖ Valida√ß√£o de dados" >> release_notes.md
        echo "- ‚úÖ Preview antes de escrever" >> release_notes.md
        echo "" >> release_notes.md
        echo "### üì• **Como usar:**" >> release_notes.md
        echo "1. Baixe o APK dos artifacts acima" >> release_notes.md
        echo "2. Habilite 'Fontes Desconhecidas' no Android" >> release_notes.md
        echo "3. Instale o APK" >> release_notes.md
        echo "4. Teste com tags NFC!" >> release_notes.md
        
        cat release_notes.md
        
    - name: üì§ Upload Release Notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release_notes.md
        retention-days: 30

    - name: üéâ Success Notification
      if: success()
      run: |
        echo "üéâ =================================="
        echo "üéâ   COMPILA√á√ÉO CONCLU√çDA COM SUCESSO!"
        echo "üéâ =================================="
        echo ""
        echo "üì± Seu APK est√° pronto!"
        echo "üì• Download: Na aba 'Actions' > 'Artifacts'"
        echo ""
        echo "üöÄ Pr√≥ximos passos:"
        echo "   1. Baixe o APK"
        echo "   2. Instale no celular"
        echo "   3. Teste com tags NFC"
        echo ""
        echo "‚ú® Parab√©ns! Seu app NFC est√° funcionando!"
