name: 🚀 Build NFC Writer PRO2 APK
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite execução manual

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Environment
      run: |
        echo "🔧 Configurando ambiente Ubuntu..."
        sudo apt-get update -qq
        sudo apt-get install -y -qq \
          build-essential \
          git \
          unzip \
          zip \
          curl \
          wget
        echo "✅ Ambiente configurado!"
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: ☕ Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: 🔧 Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          ccache
          
    - name: 📱 Install Android SDK
      uses: android-actions/setup-android@v3
      env:
        SKIP_JDK_VERSION_CHECK: true
        
    - name: 🔐 Accept Android SDK Licenses
      run: |
        echo "🔐 Aceitando licenças do Android SDK..."
        
        # Criar diretório de licenças
        mkdir -p $ANDROID_SDK_ROOT/licenses
        
        # Aceitar TODAS as licenças conhecidas do Android SDK
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        
        # Licenças específicas para build-tools mais recentes
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        echo "504667f4c0de7af1a06de9f4b1727b84351f2910" >> $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        
        # Licenças adicionais
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_SDK_ROOT/licenses/intel-android-extra-license
        echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > $ANDROID_SDK_ROOT/licenses/google-gdk-license
        echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" >> $ANDROID_SDK_ROOT/licenses/google-gdk-license
        
        # Aceitar licenças via múltiplos métodos
        echo "🔄 Método 1: Aceitar via yes..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
        
        echo "🔄 Método 2: Aceitar via printf..."
        printf "y\n%.0s" {1..50} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
        
        echo "🔄 Método 3: Aceitar com timeout..."
        timeout 60s bash -c 'printf "y\n%.0s" {1..50} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses' 2>/dev/null || true
        
        echo "✅ Licenças configuradas!"
      env:
        SKIP_JDK_VERSION_CHECK: true
        
    - name: 🛠️ Install Build Tools
      run: |
        echo "🛠️ Instalando build-tools..."
        
        # Aceitar licenças mais agressivamente
        echo "🔐 Forçando aceitação de licenças..."
        mkdir -p $ANDROID_SDK_ROOT/licenses
        
        # Todas as licenças conhecidas (método mais direto)
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "504667f4c0de7af1a06de9f4b1727b84351f2910" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        
        # Aceitar via múltiplos métodos
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
        printf "y\n%.0s" {1..100} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
        
        # Instalar APENAS versões estáveis e testadas
        echo "📦 Instalando build-tools estáveis..."
        
        # Forçar instalação com múltiplas tentativas
        for version in "33.0.2" "34.0.0" "33.0.1" "35.0.0"; do
          echo "🔄 Tentando instalar build-tools;$version..."
          printf "y\n%.0s" {1..50} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;$version" 2>/dev/null || true
        done
        
        # Instalar platform-tools
        echo "📦 Instalando platform-tools..."
        printf "y\n%.0s" {1..50} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" 2>/dev/null || true
        
        # Instalar plataforma Android API 33
        echo "📦 Instalando platforms;android-33..."
        printf "y\n%.0s" {1..50} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-33" 2>/dev/null || true
        
        # Verificar o que foi instalado
        echo "🔍 Verificando instalações:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ 2>/dev/null || echo "Build-tools não encontrado"
        ls -la $ANDROID_SDK_ROOT/platform-tools/ 2>/dev/null || echo "Platform-tools não encontrado"
        
        # Procurar AIDL em build-tools
        echo "🔍 Procurando AIDL:"
        find $ANDROID_SDK_ROOT/build-tools -name "aidl" -type f 2>/dev/null || echo "AIDL não encontrado em build-tools"
        
        # Configurar PATH para a versão mais recente
        if [ -d "$ANDROID_SDK_ROOT/build-tools" ]; then
          LATEST_BUILD_TOOLS=$(ls $ANDROID_SDK_ROOT/build-tools/ | sort -V | tail -1)
          echo "🎯 Usando build-tools: $LATEST_BUILD_TOOLS"
          echo "PATH=$ANDROID_SDK_ROOT/build-tools/$LATEST_BUILD_TOOLS:$PATH" >> $GITHUB_ENV
          echo "✅ Build-tools $LATEST_BUILD_TOOLS adicionadas ao PATH"
        fi
        
        # Adicionar platform-tools ao PATH
        if [ -d "$ANDROID_SDK_ROOT/platform-tools" ]; then
          echo "PATH=$ANDROID_SDK_ROOT/platform-tools:$PATH" >> $GITHUB_ENV
          echo "✅ Platform-tools adicionadas ao PATH"
        fi
        
        echo "✅ Build-tools configuradas!"
      env:
        SKIP_JDK_VERSION_CHECK: true
        
    - name: 🔧 Setup AIDL and Fix Buildozer
      run: |
        echo "🔍 Configurando AIDL e corrigindo Buildozer..."
        
        # Verificar se AIDL está disponível
        echo "🔍 Procurando AIDL em todas as build-tools:"
        find $ANDROID_SDK_ROOT/build-tools -name "aidl" -type f 2>/dev/null || echo "Nenhum AIDL encontrado ainda"
        
        # Se não encontrou AIDL, instalar uma versão mais antiga que sabemos que funciona
        if ! find $ANDROID_SDK_ROOT/build-tools -name "aidl" -type f 2>/dev/null | grep -q aidl; then
          echo "⚠️ AIDL não encontrado, instalando versão mais antiga..."
          printf "y\n%.0s" {1..50} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3" 2>/dev/null || true
          printf "y\n%.0s" {1..50} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;31.0.0" 2>/dev/null || true
        fi
        
        # Procurar AIDL novamente
        echo "🔍 Procurando AIDL após instalação:"
        AIDL_PATH=$(find $ANDROID_SDK_ROOT/build-tools -name "aidl" -type f 2>/dev/null | head -1)
        
        if [ -n "$AIDL_PATH" ]; then
          echo "✅ AIDL encontrado em: $AIDL_PATH"
          AIDL_DIR=$(dirname "$AIDL_PATH")
          echo "PATH=$AIDL_DIR:$PATH" >> $GITHUB_ENV
          echo "✅ AIDL adicionado ao PATH"
        else
          echo "⚠️ AIDL ainda não encontrado, continuando..."
        fi
        
        # Configurar PATH para build-tools com AIDL
        if [ -d "$ANDROID_SDK_ROOT/build-tools" ]; then
          for bt_version in $(ls $ANDROID_SDK_ROOT/build-tools/ | sort -V -r); do
            if [ -f "$ANDROID_SDK_ROOT/build-tools/$bt_version/aidl" ]; then
              echo "✅ AIDL encontrado em build-tools: $bt_version"
              echo "PATH=$ANDROID_SDK_ROOT/build-tools/$bt_version:$PATH" >> $GITHUB_ENV
              
              # Criar link simbólico para buildozer encontrar
              sudo ln -sf "$ANDROID_SDK_ROOT/build-tools/$bt_version" "$ANDROID_SDK_ROOT/build-tools/android-sdk" 2>/dev/null || true
              break
            fi
          done
        fi
        
        # Copiar build-tools para o diretório do buildozer
        echo "🔄 Copiando build-tools para buildozer..."
        mkdir -p ~/.buildozer/android/platform/android-sdk/build-tools
        if [ -d "$ANDROID_SDK_ROOT/build-tools" ]; then
          cp -r $ANDROID_SDK_ROOT/build-tools/* ~/.buildozer/android/platform/android-sdk/build-tools/ 2>/dev/null || true
        fi
        
        # Verificar se AIDL está acessível para buildozer
        echo "🔍 Verificando AIDL para buildozer:"
        find ~/.buildozer/android/platform/android-sdk/build-tools -name "aidl" -type f 2>/dev/null || echo "AIDL não encontrado no local do buildozer"
        
        # Teste final do AIDL
        echo "🔍 Teste final do AIDL:"
        which aidl && echo "✅ AIDL disponível no PATH" || echo "⚠️ AIDL não encontrado no PATH"
        
        # Listar todos os AIDLs disponíveis
        echo "📋 Todos os AIDLs encontrados:"
        find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null | head -10
        
        echo "✅ AIDL configurado!"

    - name: 🛠️ Install Buildozer
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install buildozer==1.5.0
        pip install cython==0.29.33
        pip install colorama
        pip install appdirs
        pip install sh
        pip install pexpect
        
    - name: 🔧 Configure Buildozer
      run: |
        # Verificar se buildozer.spec existe
        if [ ! -f "buildozer.spec" ]; then
          echo "❌ buildozer.spec não encontrado!"
          exit 1
        fi
        
        # Criar backup e configurar
        cp buildozer.spec buildozer.spec.backup
        
        # Configurações críticas para evitar problemas de licença
        echo "" >> buildozer.spec
        echo "# Configurações GitHub Actions - Forçar versões específicas" >> buildozer.spec
        echo "android.build_tools = 33.0.2" >> buildozer.spec
        echo "android.api = 33" >> buildozer.spec
        echo "android.minapi = 21" >> buildozer.spec
        echo "android.ndk = 25b" >> buildozer.spec
        
        # Configurações específicas para resolver problemas do AIDL
        echo "android.sdk_path = $ANDROID_SDK_ROOT" >> buildozer.spec
        echo "android.ndk_path = $ANDROID_NDK_ROOT" >> buildozer.spec
        
        # FORÇAR buildozer a usar SDK existente (não baixar novamente)
        echo "android.skip_update = True" >> buildozer.spec
        echo "android.accept_sdk_license = True" >> buildozer.spec
        
        # Configurar git
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # Criar diretórios necessários para buildozer
        mkdir -p ~/.buildozer/cache
        mkdir -p ~/.local/share/python-for-android
        
        # FORÇAR buildozer a usar o SDK que preparamos
        echo "🔄 Configurando buildozer para usar SDK pré-instalado..."
        
        # Remover qualquer SDK antigo do buildozer
        rm -rf ~/.buildozer/android/platform/android-sdk 2>/dev/null || true
        
        # Criar link simbólico direto para o SDK correto
        mkdir -p ~/.buildozer/android/platform/
        ln -sf $ANDROID_SDK_ROOT ~/.buildozer/android/platform/android-sdk
        
        # Verificar se o link foi criado corretamente
        if [ -L ~/.buildozer/android/platform/android-sdk ]; then
          echo "✅ Link simbólico criado: ~/.buildozer/android/platform/android-sdk -> $ANDROID_SDK_ROOT"
          ls -la ~/.buildozer/android/platform/android-sdk/cmdline-tools/
        else
          echo "❌ Falha ao criar link simbólico, copiando SDK..."
          cp -r $ANDROID_SDK_ROOT ~/.buildozer/android/platform/android-sdk/
        fi
        
        # Criar link para NDK
        rm -rf ~/.buildozer/android/platform/android-ndk 2>/dev/null || true
        ln -sf $ANDROID_NDK_ROOT ~/.buildozer/android/platform/android-ndk
        
        # Configurar variáveis de ambiente para buildozer
        echo "ANDROIDSDK=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROIDNDK=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "ANDROIDAPI=33" >> $GITHUB_ENV
        echo "ANDROIDMINAPI=21" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_SDK_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        
        # Configurar variáveis específicas para Java 17 compatibility
        echo "SKIP_JDK_VERSION_CHECK=true" >> $GITHUB_ENV
        
        # Verificar estrutura final
        echo "🔍 Verificando estrutura buildozer:"
        ls -la ~/.buildozer/android/platform/android-sdk/cmdline-tools/ 2>/dev/null || echo "Cmdline-tools não encontrado"
        ls -la ~/.buildozer/android/platform/android-sdk/build-tools/ 2>/dev/null || echo "Build-tools não encontrado"
        find ~/.buildozer/android/platform/android-sdk/build-tools -name "aidl" -type f 2>/dev/null || echo "AIDL não encontrado"
        
        echo "✅ Buildozer configurado para usar SDK pré-instalado!"
        
    - name: 📋 Show Build Info
      run: |
        echo "🔍 Informações do ambiente:"
        echo "Python: $(python --version)"
        echo "Java: $(java -version 2>&1 | head -1)"
        echo "Buildozer: $(buildozer version)"
        echo "SDK: $ANDROID_SDK_ROOT"
        echo "NDK: $ANDROID_NDK_ROOT"
        echo "JAVA_HOME: $JAVA_HOME"
        
        echo "🔍 AIDL status:"
        which aidl && echo "✅ AIDL disponível" || echo "⚠️ AIDL não encontrado"
        
        echo "🔍 Verificando SDKs disponíveis:"
        ls -la ~/.buildozer/android/platform/android-sdk/cmdline-tools/ 2>/dev/null || echo "Cmdline-tools não encontrado"
        
        echo "🔍 Configurações do buildozer.spec:"
        tail -10 buildozer.spec
        
    - name: 🏗️ Build APK
      run: |
        echo "🚀 Iniciando compilação do APK..."
        echo "📱 App: NFC Writer PRO2 v2.0"
        echo "🎯 Target: Android API 33"
        echo "☕ Java: $(java -version 2>&1 | head -1)"
        
        # Garantir que Java 17 seja usado com compatibilidade
        export JAVA_HOME=$JAVA_HOME
        export PATH=$JAVA_HOME/bin:$PATH
        export SKIP_JDK_VERSION_CHECK=true
        
        # Verificar Java novamente
        echo "🔍 Verificando Java antes da compilação:"
        java -version
        
        # Compilar APK com verbose para debug
        buildozer android debug --verbose
      env:
        SKIP_JDK_VERSION_CHECK: true
        
    - name: 📱 Verify APK
      run: |
        echo "🔍 Verificando APK gerado..."
        
        if [ -d "bin" ] && [ -n "$(find bin -name "*.apk" 2>/dev/null)" ]; then
          echo "✅ APK gerado com sucesso!"
          APK_FILE=$(find bin -name "*.apk" | head -1)
          echo "📱 Arquivo: $APK_FILE"
          echo "📊 Tamanho: $(du -h "$APK_FILE" | cut -f1)"
          ls -la "$APK_FILE"
        else
          echo "❌ APK não foi gerado!"
          echo "🔍 Logs de erro:"
          if [ -f ".buildozer/logs/buildozer.log" ]; then
            tail -50 .buildozer/logs/buildozer.log
          fi
          exit 1
        fi
        
    - name: 📤 Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nfc-writer-pro2-apk
        path: bin/*.apk
        retention-days: 30
        
    - name: 🎉 Success Notification
      if: success()
      run: |
        echo "🎉 =================================="
        echo "🎉   COMPILAÇÃO CONCLUÍDA COM SUCESSO!"
        echo "🎉 =================================="
        echo ""
        echo "📱 Seu APK está pronto!"
        echo "📥 Download: Na aba 'Actions' > 'Artifacts'"
        echo ""
        echo "✨ Parabéns! Seu app NFC está funcionando!"
