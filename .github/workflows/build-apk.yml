name: üöÄ Build NFC Writer PRO2 APK
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite execu√ß√£o manual

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üîß Setup Environment
      run: |
        echo "üîß Configurando ambiente Ubuntu..."
        sudo apt-get update -qq
        sudo apt-get install -y -qq \
          build-essential \
          git \
          unzip \
          zip \
          curl \
          wget
        echo "‚úÖ Ambiente configurado!"
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: ‚òï Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üì¶ Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: üîß Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          ccache
          
    - name: üì± Install Android SDK
      uses: android-actions/setup-android@v3
        
    - name: üîê Accept Android SDK Licenses
      run: |
        echo "üîê Aceitando licen√ßas do Android SDK..."
        
        # Criar diret√≥rio de licen√ßas
        mkdir -p $ANDROID_SDK_ROOT/licenses
        
        # Aceitar licen√ßas do Android SDK
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        
        # Aceitar licen√ßas via sdkmanager
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
        
        echo "‚úÖ Licen√ßas configuradas!"
        
    - name: üõ†Ô∏è Install Build Tools
      run: |
        echo "üõ†Ô∏è Instalando build-tools..."
        
        # Aceitar licen√ßas
        printf "y\n%.0s" {1..20} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
        
        # Instalar build-tools est√°veis
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2" || echo "‚ö†Ô∏è Erro ao instalar 33.0.2"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0" || echo "‚ö†Ô∏è Erro ao instalar 34.0.0"
        
        # Instalar platform-tools
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" || echo "‚ö†Ô∏è Erro ao instalar platform-tools"
        
        # Instalar plataforma Android API 33
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-33" || echo "‚ö†Ô∏è Erro ao instalar platform 33"
        
        # Verificar instala√ß√£o
        echo "üîç Build-tools instaladas:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ 2>/dev/null || echo "Build-tools n√£o encontrado"
        
        # Adicionar ao PATH
        if [ -d "$ANDROID_SDK_ROOT/build-tools" ]; then
          LATEST_BUILD_TOOLS=$(ls $ANDROID_SDK_ROOT/build-tools/ | sort -V | tail -1)
          echo "PATH=$ANDROID_SDK_ROOT/build-tools/$LATEST_BUILD_TOOLS:$PATH" >> $GITHUB_ENV
          echo "‚úÖ Build-tools $LATEST_BUILD_TOOLS adicionadas ao PATH"
        fi
        
        echo "‚úÖ Build-tools configuradas!"
        
    - name: üîß Setup AIDL
      run: |
        echo "üîç Configurando AIDL..."
        
        # Procurar AIDL nas build-tools
        find $ANDROID_SDK_ROOT/build-tools -name "aidl" -type f 2>/dev/null || echo "Procurando AIDL..."
        
        # Adicionar build-tools ao PATH se AIDL existir
        if [ -d "$ANDROID_SDK_ROOT/build-tools" ]; then
          for bt_version in $(ls $ANDROID_SDK_ROOT/build-tools/ | sort -V -r); do
            if [ -f "$ANDROID_SDK_ROOT/build-tools/$bt_version/aidl" ]; then
              echo "‚úÖ AIDL encontrado em: $bt_version"
              echo "PATH=$ANDROID_SDK_ROOT/build-tools/$bt_version:$PATH" >> $GITHUB_ENV
              break
            fi
          done
        fi
        
        echo "‚úÖ AIDL configurado!"

    - name: üõ†Ô∏è Install Buildozer
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install buildozer==1.5.0
        pip install cython==0.29.33
        pip install colorama
        pip install appdirs
        pip install sh
        pip install pexpect
        
    - name: üîß Configure Buildozer
      run: |
        # Verificar se buildozer.spec existe
        if [ ! -f "buildozer.spec" ]; then
          echo "‚ùå buildozer.spec n√£o encontrado!"
          exit 1
        fi
        
        # Criar backup e configurar
        cp buildozer.spec buildozer.spec.backup
        
        # Adicionar configura√ß√µes autom√°ticas
        echo "" >> buildozer.spec
        echo "# Configura√ß√µes GitHub Actions" >> buildozer.spec
        echo "android.build_tools = 33.0.2" >> buildozer.spec
        echo "android.api = 33" >> buildozer.spec
        echo "android.minapi = 21" >> buildozer.spec
        echo "android.ndk = 25b" >> buildozer.spec
        
        # Configurar git
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # Criar diret√≥rios necess√°rios
        mkdir -p ~/.buildozer/cache
        mkdir -p ~/.local/share/python-for-android
        
        # Configurar vari√°veis de ambiente
        echo "ANDROIDSDK=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROIDNDK=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "ANDROIDAPI=33" >> $GITHUB_ENV
        echo "ANDROIDMINAPI=21" >> $GITHUB_ENV
        
        echo "‚úÖ Buildozer configurado!"
        
    - name: üìã Show Build Info
      run: |
        echo "üîç Informa√ß√µes do ambiente:"
        echo "Python: $(python --version)"
        echo "Java: $(java -version 2>&1 | head -1)"
        echo "Buildozer: $(buildozer version)"
        echo "SDK: $ANDROID_SDK_ROOT"
        echo "NDK: $ANDROID_NDK_ROOT"
        
        echo "üîç AIDL status:"
        which aidl && echo "‚úÖ AIDL dispon√≠vel" || echo "‚ö†Ô∏è AIDL n√£o encontrado"
        
        echo "üîç Configura√ß√µes do buildozer.spec:"
        tail -10 buildozer.spec
        
    - name: üèóÔ∏è Build APK
      run: |
        echo "üöÄ Iniciando compila√ß√£o do APK..."
        echo "üì± App: NFC Writer PRO2 v2.0"
        echo "üéØ Target: Android API 33"
        
        # Compilar APK
        buildozer android debug --verbose
        
    - name: üì± Verify APK
      run: |
        echo "üîç Verificando APK gerado..."
        
        if [ -d "bin" ] && [ -n "$(find bin -name "*.apk" 2>/dev/null)" ]; then
          echo "‚úÖ APK gerado com sucesso!"
          APK_FILE=$(find bin -name "*.apk" | head -1)
          echo "üì± Arquivo: $APK_FILE"
          echo "üìä Tamanho: $(du -h "$APK_FILE" | cut -f1)"
          ls -la "$APK_FILE"
        else
          echo "‚ùå APK n√£o foi gerado!"
          echo "üîç Logs de erro:"
          if [ -f ".buildozer/logs/buildozer.log" ]; then
            tail -50 .buildozer/logs/buildozer.log
          fi
          exit 1
        fi
        
    - name: üì§ Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nfc-writer-pro2-apk
        path: bin/*.apk
        retention-days: 30
        
    - name: üéâ Success Notification
      if: success()
      run: |
        echo "üéâ =================================="
        echo "üéâ   COMPILA√á√ÉO CONCLU√çDA COM SUCESSO!"
        echo "üéâ =================================="
        echo ""
        echo "üì± Seu APK est√° pronto!"
        echo "üì• Download: Na aba 'Actions' > 'Artifacts'"
        echo ""
        echo "‚ú® Parab√©ns! Seu app NFC est√° funcionando!"
