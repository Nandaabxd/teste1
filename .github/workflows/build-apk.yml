name: 🚀 Build NFC Writer PRO2 APK
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite execução manual

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: ☕ Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: 🔧 Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          openjdk-17-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          ccache \
          unzip \
          zip
          
    - name: 📱 Install Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        ndk-version: '25.2.9519653'
        
    - name: 🛠️ Install Buildozer
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install buildozer==1.5.0
        pip install cython==0.29.33
        pip install colorama
        pip install appdirs
        pip install sh
        pip install pexpect
        
    - name: 🔧 Fix Buildozer Issues
      run: |
        # Corrigir problemas comuns do buildozer
        echo "🔧 Aplicando correções..."
        
        # Verificar se buildozer.spec existe
        if [ ! -f "buildozer.spec" ]; then
          echo "❌ buildozer.spec não encontrado!"
          exit 1
        fi
        
        # Instalar dependências adicionais que podem estar faltando
        sudo apt-get install -y \
          libc6-dev \
          libffi-dev \
          libssl-dev \
          python3-distutils \
          python3-venv || true
        
        # Criar diretórios necessários
        mkdir -p ~/.buildozer/cache
        mkdir -p ~/.local/share/python-for-android
        
        # Configurar git (necessário para algumas dependências)
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # Limpar cache se necessário
        buildozer android clean || true
        
    - name: 📋 Show Build Info
      run: |
        echo "🔍 Environment Info:"
        echo "Python: $(python --version)"
        echo "Java: $(java -version)"
        echo "Buildozer: $(buildozer version)"
        echo "NDK: $ANDROID_NDK_ROOT"
        echo "SDK: $ANDROID_SDK_ROOT"
        
    - name: 🔧 Configure Buildozer
      run: |
        # Criar diretório .buildozer se não existir
        mkdir -p ~/.buildozer
        
        # Configurar variáveis de ambiente
        export ANDROIDSDK="$ANDROID_SDK_ROOT"
        export ANDROIDNDK="$ANDROID_NDK_ROOT"
        export ANDROIDAPI="33"
        export ANDROIDMINAPI="21"
        
        echo "SDK Path: $ANDROIDSDK"
        echo "NDK Path: $ANDROIDNDK"
        
        # Forçar instalação de dependências que podem faltar
        pip install --upgrade cython==0.29.33
        pip install --upgrade pyjnius
        
    - name: 🔍 Pre-Build Diagnostics
      run: |
        echo "🔍 Diagnóstico pré-build:"
        echo "Working directory: $(pwd)"
        echo "Files present:"
        ls -la
        echo ""
        echo "buildozer.spec content (first 30 lines):"
        head -30 buildozer.spec
        echo ""
        echo "Python packages installed:"
        pip list | grep -E "(buildozer|cython|pyjnius|kivy)"
        echo ""
        echo "Environment variables:"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        
    - name: 🏗️ Build APK
      run: |
        echo "🚀 Iniciando compilação do APK..."
        echo "📱 App: NFC Writer PRO2 v2.0"
        echo "🎯 Target: Android API 33"
        echo "📐 Arch: ARM 32/64-bit"
        
        # Debug info antes do build
        echo "🔍 Debug info:"
        ls -la
        cat buildozer.spec | head -20
        
        # Compilar APK com debug verbose
        buildozer android debug --verbose
        
    - name: 📱 Verify APK
      run: |
        echo "🔍 Verificando APK gerado..."
        ls -la bin/ || echo "❌ Diretório bin/ não existe"
        
        # Verificar se algum APK foi gerado
        find . -name "*.apk" -type f || echo "❌ Nenhum APK encontrado"
        
        if [ -d "bin" ] && [ -n "$(ls -A bin/*.apk 2>/dev/null)" ]; then
          echo "✅ APK gerado com sucesso!"
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "📱 Arquivo: $APK_FILE"
          echo "📊 Tamanho: $(du -h $APK_FILE | cut -f1)"
          
          # Verificar estrutura do APK
          file $APK_FILE
        else
          echo "❌ APK não foi gerado!"
          echo "🔍 Verificando logs de erro..."
          if [ -f ".buildozer/logs/buildozer.log" ]; then
            echo "📋 Últimas linhas do log:"
            tail -50 .buildozer/logs/buildozer.log
          fi
          exit 1
        fi
        
    - name: 📤 Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nfc-writer-pro2-apk
        path: bin/*.apk
        retention-days: 30
        
    - name: 📋 Create Release Notes
      if: success()
      run: |
        echo "🎉 **NFC Writer PRO2 v2.0 - APK Gerado com Sucesso!**" > release_notes.md
        echo "" >> release_notes.md
        echo "### 📱 **Informações do APK:**" >> release_notes.md
        echo "- **App**: NFC Writer PRO2" >> release_notes.md
        echo "- **Versão**: 2.0" >> release_notes.md
        echo "- **Android Min**: API 21 (Android 5.0)" >> release_notes.md
        echo "- **Android Target**: API 33 (Android 13)" >> release_notes.md
        echo "- **Arquitetura**: ARM 32/64-bit" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🔍 **Funcionalidades:**" >> release_notes.md
        echo "- ✅ Leitura de tags NFC" >> release_notes.md
        echo "- ✅ Escrita de tags NFC (10 tipos)" >> release_notes.md
        echo "- ✅ Interface moderna e intuitiva" >> release_notes.md
        echo "- ✅ Histórico de leituras" >> release_notes.md
        echo "- ✅ Validação de dados" >> release_notes.md
        echo "- ✅ Preview antes de escrever" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 📥 **Como usar:**" >> release_notes.md
        echo "1. Baixe o APK dos artifacts acima" >> release_notes.md
        echo "2. Habilite 'Fontes Desconhecidas' no Android" >> release_notes.md
        echo "3. Instale o APK" >> release_notes.md
        echo "4. Teste com tags NFC!" >> release_notes.md
        
        cat release_notes.md
        
    - name: 📤 Upload Release Notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release_notes.md
        retention-days: 30

    - name: 🎉 Success Notification
      if: success()
      run: |
        echo "🎉 =================================="
        echo "🎉   COMPILAÇÃO CONCLUÍDA COM SUCESSO!"
        echo "🎉 =================================="
        echo ""
        echo "📱 Seu APK está pronto!"
        echo "📥 Download: Na aba 'Actions' > 'Artifacts'"
        echo ""
        echo "🚀 Próximos passos:"
        echo "   1. Baixe o APK"
        echo "   2. Instale no celular"
        echo "   3. Teste com tags NFC"
        echo ""
        echo "✨ Parabéns! Seu app NFC está funcionando!"
