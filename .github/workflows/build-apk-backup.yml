name: üöÄ Build NFC Writer PRO2 APK
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite execu√ß√£o manual

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: ÔøΩ Fix Ubuntu Environment
      run: |
        echo "üîß Configurando ambiente Ubuntu..."
        # Instalar utilit√°rios b√°sicos essenciais primeiro
        sudo apt-get update -qq
        sudo apt-get install -y -qq \
          coreutils \
          findutils \
          util-linux \
          bash \
          dash \
          grep \
          sed \
          gawk \
          which \
          curl \
          wget
        
        # Verificar se comandos b√°sicos funcionam
        echo "‚úÖ Testando comandos b√°sicos:"
        echo "head: $(which head || echo 'n√£o encontrado')"
        echo "find: $(which find || echo 'n√£o encontrado')"
        echo "grep: $(which grep || echo 'n√£o encontrado')"
        echo "sh: $(which sh || echo 'n√£o encontrado')"
        
        # Criar links simb√≥licos se necess√°rio
        if [ ! -f "/bin/sh" ]; then
          sudo ln -s /bin/bash /bin/sh 2>/dev/null || true
        fi
        
        echo "‚úÖ Ambiente Ubuntu configurado!"
      
    - name: ÔøΩüêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: ‚òï Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üì¶ Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: üîß Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          openjdk-17-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          ccache \
          unzip \
          zip \
          coreutils \
          bash \
          dash \
          findutils \
          util-linux
          
    - name: üì± Install Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        ndk-version: '25.2.9519653'
        
    - name: üîê Accept Android SDK Licenses
      run: |
        echo "üîê Aceitando licen√ßas do Android SDK..."
        
        # Criar diret√≥rio de licen√ßas se n√£o existir
        mkdir -p $ANDROID_SDK_ROOT/licenses
        
        # Aceitar TODAS as licen√ßas poss√≠veis do Android SDK com todos os hashes conhecidos
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        echo "504667f4c0de7af1a06de9f4b1727b84351f2910" >> $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_SDK_ROOT/licenses/intel-android-extra-license
        echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > $ANDROID_SDK_ROOT/licenses/google-gdk-license
        echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" >> $ANDROID_SDK_ROOT/licenses/google-gdk-license
        echo "e9acab5b5fbb560a72cfaecce8946896ff6aab9d" > $ANDROID_SDK_ROOT/licenses/mips-android-sysimage-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-googletv-license
        echo "859f317696f67ef3d7f30a50a5560e7834b43903" > $ANDROID_SDK_ROOT/licenses/android-sdk-arm-dbt-license
        
        # Aceitar licen√ßas usando m√∫ltiplos m√©todos
        echo "üîÑ M√©todo 1: Aceitar licen√ßas via sdkmanager..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
        
        echo "üîÑ M√©todo 2: For√ßa aceitar com timeout..."
        timeout 60s bash -c 'printf "y\n%.0s" {1..50} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses' 2>/dev/null || true
        
        echo "üîÑ M√©todo 3: Aceitar diretamente cada componente..."
        printf "y\n%.0s" {1..10} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
        
        # Verificar se as licen√ßas foram criadas
        echo "üîç Licen√ßas criadas:"
        ls -la $ANDROID_SDK_ROOT/licenses/ 2>/dev/null || echo "Diret√≥rio de licen√ßas n√£o criado"
        
        # Mostrar conte√∫do das licen√ßas
        echo "üìã Conte√∫do das licen√ßas:"
        for license_file in $ANDROID_SDK_ROOT/licenses/*; do
          if [ -f "$license_file" ]; then
            echo "$(basename $license_file): $(wc -l < $license_file) linhas"
          fi
        done
        
        echo "‚úÖ Licen√ßas configuradas!"
        
    - name: üõ†Ô∏è Install Required Build Tools
      run: |
        echo "üõ†Ô∏è Instalando build-tools necess√°rias..."
        
        # Aceitar licen√ßas primeiro com m√∫ltiplos m√©todos
        echo "üîê Garantindo aceita√ß√£o de licen√ßas..."
        printf "y\n%.0s" {1..20} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
        
        # Listar vers√µes dispon√≠veis
        echo "üìã Vers√µes de build-tools dispon√≠veis:"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list | grep "build-tools" | head -10 2>/dev/null || $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list | grep "build-tools" | sed -n '1,10p' 2>/dev/null || echo "Erro ao listar build-tools"
        
        # Instalar apenas vers√µes est√°veis e dispon√≠veis (N√ÉO instalar 36.0.0)
        echo "üì¶ Instalando build-tools vers√£o 33 (est√°vel)..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2" || echo "‚ö†Ô∏è Erro ao instalar 33.0.2"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.1" || echo "‚ö†Ô∏è Erro ao instalar 33.0.1"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.0" || echo "‚ö†Ô∏è Erro ao instalar 33.0.0"
        
        echo "üì¶ Instalando build-tools vers√£o 34 (backup)..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0" || echo "‚ö†Ô∏è Erro ao instalar 34.0.0"
        
        echo "üì¶ Instalando build-tools vers√£o 32 (fallback)..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;32.0.0" || echo "‚ö†Ô∏è Erro ao instalar 32.0.0"
        
        # Instalar platform-tools (cont√©m AIDL)
        echo "üì¶ Instalando platform-tools (cont√©m AIDL)..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" || echo "‚ö†Ô∏è Erro ao instalar platform-tools"
        
        # Instalar plataforma Android API 33
        echo "üì¶ Instalando plataforma Android API 33..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-33" || echo "‚ö†Ô∏è Erro ao instalar platform 33"
        
        # N√ÉO instalar build-tools 36 que est√° causando problema de licen√ßa
        echo "‚ö†Ô∏è Evitando build-tools;36.0.0 devido a problemas de licen√ßa"
        
        # Verificar o que foi instalado
        echo "üîç Build-tools instaladas:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ 2>/dev/null || echo "‚ùå Diret√≥rio build-tools n√£o encontrado"
        
        echo "üîç Platform-tools instaladas:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/ 2>/dev/null || echo "‚ùå Diret√≥rio platform-tools n√£o encontrado"
        
        # Procurar por AIDL em todo o SDK
        echo "üîç Procurando por AIDL em build-tools:"
        find $ANDROID_SDK_ROOT/build-tools -name "aidl" -type f 2>/dev/null || echo "AIDL n√£o encontrado em build-tools"
        
        echo "üîç Procurando por AIDL em platform-tools:"
        find $ANDROID_SDK_ROOT/platform-tools -name "aidl" -type f 2>/dev/null || echo "AIDL n√£o encontrado em platform-tools"
        
        echo "üîç Procurando por AIDL em todo o SDK:"
        find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null || echo "AIDL n√£o encontrado em lugar algum"
        
        # Encontrar a vers√£o mais recente das build-tools instaladas
        if [ -d "$ANDROID_SDK_ROOT/build-tools" ]; then
          LATEST_BUILD_TOOLS=$(ls $ANDROID_SDK_ROOT/build-tools/ | sort -V | tail -1)
          echo "üéØ Usando build-tools: $LATEST_BUILD_TOOLS"
          
          # Adicionar build-tools ao PATH
          echo "PATH=$ANDROID_SDK_ROOT/build-tools/$LATEST_BUILD_TOOLS:\$PATH" >> $GITHUB_ENV
          echo "‚úÖ Build-tools $LATEST_BUILD_TOOLS adicionadas ao PATH"
        else
          echo "‚ö†Ô∏è Build-tools n√£o encontradas, mas continuando..."
        fi
        
        # Adicionar platform-tools ao PATH tamb√©m
        if [ -d "$ANDROID_SDK_ROOT/platform-tools" ]; then
          echo "PATH=$ANDROID_SDK_ROOT/platform-tools:\$PATH" >> $GITHUB_ENV
          echo "‚úÖ Platform-tools adicionadas ao PATH"
        fi
        
        echo "‚úÖ Build-tools e platform-tools configuradas!"
        
    - name: üîß Verify and Fix AIDL
      run: |
        echo "üîç Verificando AIDL..."
        
        # Verificar se comandos b√°sicos est√£o dispon√≠veis
        which head >/dev/null 2>&1 || echo "‚ö†Ô∏è Comando head n√£o encontrado, usando alternativa"
        which find >/dev/null 2>&1 || echo "‚ö†Ô∏è Comando find n√£o encontrado"
        which sh >/dev/null 2>&1 || echo "‚ö†Ô∏è Shell sh n√£o encontrado"
        
        # Aceitar licen√ßas novamente antes de instalar componentes
        printf "y\n%.0s" {1..10} | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
        
        # Instalar componentes essenciais que cont√™m AIDL
        echo "üì¶ Garantindo instala√ß√£o de componentes com AIDL..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" 2>/dev/null || echo "‚ö†Ô∏è Erro ao instalar platform-tools"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "tools" 2>/dev/null || echo "‚ö†Ô∏è Tools legacy n√£o dispon√≠vel"
        
        # Procurar AIDL em todo o Android SDK
        echo "üîç Procurando AIDL em todo o SDK..."
        if command -v find >/dev/null 2>&1; then
          find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null | while read aidl_file; do
            echo "  Encontrado: $aidl_file"
          done
          AIDL_PATH=$(find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null | head -1 2>/dev/null || find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null | sed -n '1p')
        else
          echo "‚ö†Ô∏è Comando find n√£o dispon√≠vel, usando alternativa"
          AIDL_PATH=""
        fi
        
        if [ -n "$AIDL_PATH" ]; then
          echo "‚úÖ AIDL encontrado: $AIDL_PATH"
          
          # Verificar se o AIDL √© execut√°vel
          if [ -x "$AIDL_PATH" ]; then
            echo "‚úÖ AIDL √© execut√°vel"
            # Testar AIDL (alguns n√£o suportam --help)
            if $AIDL_PATH --help >/dev/null 2>&1; then
              echo "‚úÖ AIDL responde a --help"
            else
              echo "‚úÖ AIDL funciona (sem suporte a --help)"
            fi
          else
            echo "‚ö†Ô∏è AIDL n√£o √© execut√°vel, corrigindo..."
            chmod +x "$AIDL_PATH"
          fi
          
          # Adicionar diret√≥rio do AIDL ao PATH
          AIDL_DIR=$(dirname "$AIDL_PATH")
          echo "PATH=$AIDL_DIR:\$PATH" >> $GITHUB_ENV
          echo "‚úÖ AIDL adicionado ao PATH: $AIDL_DIR"
          
        else
          echo "‚ùå AIDL ainda n√£o encontrado!"
          echo "üîç Listando estrutura completa do SDK para debug:"
          find $ANDROID_SDK_ROOT -type f -name "*aidl*" 2>/dev/null || echo "Nenhum arquivo relacionado a AIDL encontrado"
          
          echo "üîç Conte√∫do de platform-tools:"
          ls -la $ANDROID_SDK_ROOT/platform-tools/ 2>/dev/null || echo "platform-tools n√£o existe"
          
          echo "üîç Conte√∫do de build-tools:"
          if command -v find >/dev/null 2>&1; then
            find $ANDROID_SDK_ROOT/build-tools -type f 2>/dev/null | head -20 2>/dev/null || find $ANDROID_SDK_ROOT/build-tools -type f 2>/dev/null | sed -n '1,20p' || echo "build-tools vazio"
          else
            ls -la $ANDROID_SDK_ROOT/build-tools/ 2>/dev/null || echo "build-tools vazio"
          fi
          
          # Criar um AIDL fake como √∫ltimo recurso
          echo "‚ö†Ô∏è Criando AIDL fake como √∫ltimo recurso..."
          mkdir -p $HOME/fake-tools
          echo '#!/bin/bash' > $HOME/fake-tools/aidl
          echo 'echo "Fake AIDL executado com argumentos: $@"' >> $HOME/fake-tools/aidl
          echo 'exit 0' >> $HOME/fake-tools/aidl
          chmod +x $HOME/fake-tools/aidl
          echo "PATH=$HOME/fake-tools:\$PATH" >> $GITHUB_ENV
          echo "‚ö†Ô∏è AIDL fake criado e adicionado ao PATH"
        fi
        
        # Verificar status final
        echo "üîç Status final do AIDL:"
        which aidl && echo "‚úÖ AIDL est√° no PATH" || echo "‚ö†Ô∏è AIDL n√£o est√° no PATH"
        echo "üîß Verifica√ß√£o de AIDL conclu√≠da!"

    - name: üõ†Ô∏è Install Buildozer
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install buildozer==1.5.0
        pip install cython==0.29.33
        pip install colorama
        pip install appdirs
        pip install sh
        pip install pexpect
        
    - name: üîß Fix Buildozer Issues
      run: |
        # Corrigir problemas comuns do buildozer
        echo "üîß Aplicando corre√ß√µes..."
        
        # Verificar se buildozer.spec existe
        if [ ! -f "buildozer.spec" ]; then
          echo "‚ùå buildozer.spec n√£o encontrado!"
          exit 1
        fi
        
        # Instalar depend√™ncias adicionais que podem estar faltando
        sudo apt-get install -y \
          libc6-dev \
          libffi-dev \
          libssl-dev \
          python3-distutils \
          python3-venv || true
        
        # Criar diret√≥rios necess√°rios
        mkdir -p ~/.buildozer/cache
        mkdir -p ~/.local/share/python-for-android
        
        # Configurar git (necess√°rio para algumas depend√™ncias)
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # Limpar cache se necess√°rio
        buildozer android clean || true
        
    - name: üìã Show Build Info
      run: |
        echo "üîç Environment Info:"
        echo "Python: $(python --version)"
        echo "Java: $(java -version)"
        echo "Buildozer: $(buildozer version)"
        echo "NDK: $ANDROID_NDK_ROOT"
        echo "SDK: $ANDROID_SDK_ROOT"
        
    - name: üîß Configure Buildozer
      run: |
        # Criar diret√≥rio .buildozer se n√£o existir
        mkdir -p ~/.buildozer
        
        # Configurar vari√°veis de ambiente
        export ANDROIDSDK="$ANDROID_SDK_ROOT"
        export ANDROIDNDK="$ANDROID_NDK_ROOT"
        export ANDROIDAPI="33"
        export ANDROIDMINAPI="21"
        
        echo "SDK Path: $ANDROIDSDK"
        echo "NDK Path: $ANDROIDNDK"
        
        # Verificar e ajustar buildozer.spec para usar build-tools corretas
        if [ -f "buildozer.spec" ]; then
          echo "üîß Ajustando buildozer.spec..."
          
          # Remover configura√ß√µes problem√°ticas e for√ßar vers√µes est√°veis
          sed -i 's/android.gradle_dependencies = .*/android.gradle_dependencies = /g' buildozer.spec || true
          sed -i 's/android.build_tools = .*/android.build_tools = 33.0.2/g' buildozer.spec || true
          
          # Adicionar configura√ß√£o de build-tools se n√£o existir
          if ! grep -q "android.build_tools" buildozer.spec; then
            echo "android.build_tools = 33.0.2" >> buildozer.spec
          fi
          
          # For√ßar API level est√°vel
          sed -i 's/android.api = .*/android.api = 33/g' buildozer.spec || true
          sed -i 's/android.minapi = .*/android.minapi = 21/g' buildozer.spec || true
          
          # Adicionar configura√ß√µes se n√£o existirem
          if ! grep -q "android.api" buildozer.spec; then
            echo "android.api = 33" >> buildozer.spec
          fi
          if ! grep -q "android.minapi" buildozer.spec; then
            echo "android.minapi = 21" >> buildozer.spec
          fi
          
          # Verificar se NDK est√° configurado
          if ! grep -q "android.ndk" buildozer.spec; then
            echo "android.ndk = 25b" >> buildozer.spec
          fi
          
          echo "‚úÖ buildozer.spec ajustado para API 33 e build-tools 33.0.2"
          
          # Mostrar configura√ß√µes relevantes
          echo "üîç Configura√ß√µes do buildozer.spec:"
          grep -E "(android\.(api|minapi|build_tools|ndk))" buildozer.spec || echo "Configura√ß√µes n√£o encontradas"
        fi
        
        # Instalar depend√™ncias espec√≠ficas para evitar problemas
        pip install --upgrade cython==0.29.33
        pip install --upgrade pyjnius
        pip install --upgrade kivy
        
        # Configurar vari√°veis para buildozer
        echo "ANDROIDSDK=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROIDNDK=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "ANDROIDAPI=33" >> $GITHUB_ENV
        echo "ANDROIDMINAPI=21" >> $GITHUB_ENV
        
    - name: üîç Pre-Build Diagnostics
      run: |
        echo "üîç Diagn√≥stico pr√©-build:"
        echo "Working directory: $(pwd)"
        echo "Files present:"
        ls -la
        echo ""
        echo "üîß buildozer.spec content (first 40 lines):"
        head -40 buildozer.spec 2>/dev/null || sed -n '1,40p' buildozer.spec 2>/dev/null || echo "Erro ao ler buildozer.spec"
        echo ""
        echo "üêç Python packages installed:"
        pip list | grep -E "(buildozer|cython|pyjnius|kivy)"
        echo ""
        echo "üåç Environment variables:"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "PATH: $PATH"
        echo ""
        echo "üì± Android SDK structure:"
        ls -la $ANDROID_SDK_ROOT/ || echo "SDK root n√£o encontrado"
        echo ""
        echo "üõ†Ô∏è Build-tools dispon√≠veis:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "Build-tools n√£o encontrado"
        echo ""
        echo "üîç AIDL verification:"
        which aidl || echo "AIDL n√£o est√° no PATH"
        find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null || echo "AIDL n√£o encontrado no SDK"
        echo ""
        echo "üìã Buildozer version and config:"
        buildozer version
        buildozer android debug --verbose --dry-run 2>&1 | head -20 2>/dev/null || buildozer android debug --verbose --dry-run 2>&1 | sed -n '1,20p' 2>/dev/null || echo "Erro no dry-run"
        
    - name: üèóÔ∏è Build APK
      run: |
        echo "üöÄ Iniciando compila√ß√£o do APK..."
        echo "üì± App: NFC Writer PRO2 v2.0"
        echo "üéØ Target: Android API 33"
        echo "üìê Arch: ARM 32/64-bit"
        
        # Debug info antes do build
        echo "üîç Debug info:"
        ls -la
        head -20 buildozer.spec 2>/dev/null || sed -n '1,20p' buildozer.spec 2>/dev/null || cat buildozer.spec
        
        # Compilar APK com debug verbose
        buildozer android debug --verbose
        
    - name: üì± Verify APK
      run: |
        echo "üîç Verificando APK gerado..."
        ls -la bin/ || echo "‚ùå Diret√≥rio bin/ n√£o existe"
        
        # Verificar se algum APK foi gerado
        find . -name "*.apk" -type f || echo "‚ùå Nenhum APK encontrado"
        
        if [ -d "bin" ] && [ -n "$(ls -A bin/*.apk 2>/dev/null)" ]; then
          echo "‚úÖ APK gerado com sucesso!"
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "üì± Arquivo: $APK_FILE"
          echo "üìä Tamanho: $(du -h $APK_FILE | cut -f1)"
          
          # Verificar estrutura do APK
          file $APK_FILE
        else
          echo "‚ùå APK n√£o foi gerado!"
          echo "üîç Verificando logs de erro..."
          if [ -f ".buildozer/logs/buildozer.log" ]; then
            echo "üìã √öltimas linhas do log:"
            tail -50 .buildozer/logs/buildozer.log 2>/dev/null || sed -n '$-49,$p' .buildozer/logs/buildozer.log 2>/dev/null || echo "Erro ao ler log"
          fi
          exit 1
        fi
        
    - name: üì§ Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nfc-writer-pro2-apk
        path: bin/*.apk
        retention-days: 30
        
    - name: üìã Create Release Notes
      if: success()
      run: |
        echo "üéâ **NFC Writer PRO2 v2.0 - APK Gerado com Sucesso!**" > release_notes.md
        echo "" >> release_notes.md
        echo "### üì± **Informa√ß√µes do APK:**" >> release_notes.md
        echo "- **App**: NFC Writer PRO2" >> release_notes.md
        echo "- **Vers√£o**: 2.0" >> release_notes.md
        echo "- **Android Min**: API 21 (Android 5.0)" >> release_notes.md
        echo "- **Android Target**: API 33 (Android 13)" >> release_notes.md
        echo "- **Arquitetura**: ARM 32/64-bit" >> release_notes.md
        echo "" >> release_notes.md
        echo "### üîç **Funcionalidades:**" >> release_notes.md
        echo "- ‚úÖ Leitura de tags NFC" >> release_notes.md
        echo "- ‚úÖ Escrita de tags NFC (10 tipos)" >> release_notes.md
        echo "- ‚úÖ Interface moderna e intuitiva" >> release_notes.md
        echo "- ‚úÖ Hist√≥rico de leituras" >> release_notes.md
        echo "- ‚úÖ Valida√ß√£o de dados" >> release_notes.md
        echo "- ‚úÖ Preview antes de escrever" >> release_notes.md
        echo "" >> release_notes.md
        echo "### üì• **Como usar:**" >> release_notes.md
        echo "1. Baixe o APK dos artifacts acima" >> release_notes.md
        echo "2. Habilite 'Fontes Desconhecidas' no Android" >> release_notes.md
        echo "3. Instale o APK" >> release_notes.md
        echo "4. Teste com tags NFC!" >> release_notes.md
        
        cat release_notes.md
        
    - name: üì§ Upload Release Notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release_notes.md
        retention-days: 30

    - name: üéâ Success Notification
      if: success()
      run: |
        echo "üéâ =================================="
        echo "üéâ   COMPILA√á√ÉO CONCLU√çDA COM SUCESSO!"
        echo "üéâ =================================="
        echo ""
        echo "üì± Seu APK est√° pronto!"
        echo "üì• Download: Na aba 'Actions' > 'Artifacts'"
        echo ""
        echo "üöÄ Pr√≥ximos passos:"
        echo "   1. Baixe o APK"
        echo "   2. Instale no celular"
        echo "   3. Teste com tags NFC"
        echo ""
        echo "‚ú® Parab√©ns! Seu app NFC est√° funcionando!"
