name: 🚀 Build Android APK

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      
    - name: ☕ Configurar Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 🐍 Configurar Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 💾 Cache das dependências
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer
          ~/.cache/pip
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: 📦 Instalar dependências do sistema
      run: |
        echo "🔧 Instalando dependências do sistema..."
        sudo apt-get update -qq
        sudo apt-get install -y \
          git \
          zip \
          unzip \
          python3-pip \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev \
          build-essential \
          libltdl-dev \
          wget \
          curl \
          lbzip2 \
          openjdk-17-jdk
        
        echo "☕ Configurando JAVA_HOME..."
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        echo "PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH" >> $GITHUB_ENV
        
    - name: 🔧 Verificar versões
      run: |
        echo "📱 App: NFC Writer PRO2 v2.0"
        echo "🎯 Target: Android API 33"
        echo "☕ Java: $(java -version 2>&1 | head -n 1)"
        echo "🐍 Python: $(python3 --version)"
        
    - name: 🐍 Instalar Python dependencies
      run: |
        echo "📦 Instalando dependências Python..."
        python3 -m pip install --upgrade pip
        python3 -m pip install buildozer==1.5.0 cython==0.29.36
        
    - name: 🔧 CORREÇÃO SUPER ROBUSTA
      run: |
        echo "🔧 Executando CORREÇÃO SUPER ROBUSTA..."
        echo "🎯 Garantindo que TUDO funcione:"
        echo "  1. SDK existe e está configurado"
        echo "  2. Licenças à prova de balas"
        echo "  3. APENAS componentes compatíveis"
        echo "  4. Build-tools no local EXATO"
        echo "  5. AIDL super funcional"
        
        python3 fix_super_robusto.py
        
        echo "🔍 VERIFICAÇÃO FINAL..."
        
        SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
        
        # Verificar build-tools no local EXATO onde buildozer procura
        echo "🔨 Verificando build-tools no local esperado..."
        EXPECTED_BUILD_TOOLS="$SDK_ROOT/cmdline-tools/latest/build-tools"
        if [ -d "$EXPECTED_BUILD_TOOLS" ]; then
            echo "✅ Build-tools encontrado: $EXPECTED_BUILD_TOOLS"
            echo "📦 Versões disponíveis:"
            ls -la "$EXPECTED_BUILD_TOOLS/" 2>/dev/null | head -5
        else
            echo "❌ Build-tools ausente no local esperado: $EXPECTED_BUILD_TOOLS"
        fi
        
        # Verificar AIDL funcional
        echo "🔧 Verificando AIDL..."
        if command -v aidl >/dev/null 2>&1; then
            echo "✅ AIDL disponível no PATH"
            echo "🧪 Testando AIDL:"
            aidl --help 2>/dev/null | head -3 || echo "AIDL teste concluído"
        else
            echo "❌ AIDL não disponível no PATH"
        fi
        
        # Verificar licenças
        echo "🔐 Verificando licenças..."
        LICENSES_DIR="$SDK_ROOT/licenses"
        if [ -d "$LICENSES_DIR" ]; then
            LICENSE_COUNT=$(ls -1 "$LICENSES_DIR" 2>/dev/null | wc -l)
            echo "✅ Licenças: $LICENSE_COUNT arquivos encontrados"
        else
            echo "❌ Diretório de licenças não existe"
        fi
        
        # Configurar ambiente final
        echo "🌍 Configurando ambiente final..."
        export ANDROID_SDK_ROOT="$SDK_ROOT"
        export ANDROID_HOME="$SDK_ROOT"
        export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$SDK_ROOT/platform-tools:$SDK_ROOT/build-tools/33.0.2:$PATH"
        
        echo "✅ AMBIENTE CONFIGURADO:"
        echo "  📁 SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "  🛤️ PATH atualizado com build-tools e platform-tools"
        
    - name: 📱 Criar diretórios necessários
      run: |
        echo "📁 Criando estrutura de diretórios..."
        mkdir -p ~/.buildozer
        mkdir -p bin
        
    - name:  Compilar APK
      run: |
        echo "🚀 Iniciando compilação do APK..."
        
        # Configurar ambiente
        export ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
        export ANDROID_HOME="$ANDROID_SDK_ROOT"
        export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
        export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
        
        # Verificar configurações
        echo "📋 Verificando configurações:"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "Java version: $(java -version 2>&1 | head -n 1)"
        
        # Compilar com verbose
        echo "🔨 Iniciando build..."
        buildozer android debug --verbose
        
    - name: 📦 Verificar APK gerado
      run: |
        echo "📦 Verificando APK gerado..."
        ls -la bin/
        if [ -f bin/*.apk ]; then
          echo "✅ APK gerado com sucesso!"
          APK_FILE=$(ls bin/*.apk | head -n 1)
          echo "📱 APK: $APK_FILE"
          echo "📏 Tamanho: $(du -h "$APK_FILE" | cut -f1)"
        else
          echo "❌ APK não foi gerado"
          exit 1
        fi
        
    - name: 🎉 Upload do APK
      uses: actions/upload-artifact@v4
      with:
        name: nfc-writer-pro2-v2.0-debug
        path: bin/*.apk
        retention-days: 30
        
    - name: 📊 Resumo do Build
      run: |
        echo "📊 Resumo do Build:"
        echo "✅ Status: Sucesso"
        echo "📱 App: NFC Writer PRO2 v2.0"
        echo "🎯 Target: Android API 33"
        echo "📦 APK: $(ls bin/*.apk | head -n 1)"
        echo "🕒 Tempo de build: Concluído"
        
    - name: 🧹 Limpeza
      if: always()
      run: |
        echo "🧹 Limpando arquivos temporários..."
        rm -rf ~/.buildozer/android/platform/build-*
        rm -rf ~/.buildozer/android/platform/dists
        echo "✅ Limpeza concluída"
